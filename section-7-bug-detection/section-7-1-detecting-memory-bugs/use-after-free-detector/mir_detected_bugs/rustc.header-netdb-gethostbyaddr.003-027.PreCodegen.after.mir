// MIR for `header::netdb::gethostbyaddr`
// source = MirSource { instance: Item(DefId(0:1066 ~ relibc[4aa3]::header[0]::netdb[0]::gethostbyaddr[0])), promoted: None }
// pass_name = PreCodegen
// disambiguator = after

| User Type Annotations
| 0: Canonical { max_universe: U0, variables: [], value: Ty(header::netinet_in::in_addr) } at src/header/netdb/mod.rs:187:15: 187:22
| 1: Canonical { max_universe: U0, variables: [], value: Ty(header::netinet_in::in_addr) } at src/header/netdb/mod.rs:187:15: 187:22
| 2: Canonical { max_universe: U0, variables: [], value: Ty(*mut header::netdb::hostent) } at src/header/netdb/mod.rs:190:16: 190:28
| 3: Canonical { max_universe: U0, variables: [], value: Ty(*mut header::netdb::hostent) } at src/header/netdb/mod.rs:190:16: 190:28
| 4: Canonical { max_universe: U0, variables: [], value: Ty([i8; 4]) } at src/header/netdb/mod.rs:204:31: 204:38
| 5: Canonical { max_universe: U0, variables: [], value: Ty([i8; 4]) } at src/header/netdb/mod.rs:204:31: 204:38
| 6: Canonical { max_universe: U0, variables: [], value: Ty(alloc::vec::Vec<alloc::vec::Vec<u8>>) } at src/header/netdb/mod.rs:216:28: 216:40
| 7: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }, CanonicalVarInfo { kind: Ty(General(U0)) }], value: TypeOf(DefId(4:3599 ~ alloc[66fa]::vec[0]::{{impl}}[0]::new[0]), UserSubsts { substs: [^0], user_self_ty: Some(UserSelfTy { impl_def_id: DefId(4:3597 ~ alloc[66fa]::vec[0]::{{impl}}[0]), self_ty: alloc::vec::Vec<^1> }) }) } at src/header/netdb/mod.rs:216:43: 216:51
| 8: Canonical { max_universe: U0, variables: [], value: Ty(alloc::vec::Vec<alloc::vec::Vec<u8>>) } at src/header/netdb/mod.rs:216:28: 216:40
| 9: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }, CanonicalVarInfo { kind: Ty(General(U0)) }], value: TypeOf(DefId(4:3118 ~ alloc[66fa]::slice[0]::{{impl}}[0]::into_vec[0]), UserSubsts { substs: [^0], user_self_ty: Some(UserSelfTy { impl_def_id: DefId(4:3102 ~ alloc[66fa]::slice[0]::{{impl}}[0]), self_ty: [^1] }) }) } at <::alloc::macros::vec macros>:3:1: 3:22
| 10: Canonical { max_universe: U0, variables: [], value: Ty(alloc::vec::Vec<*mut i8>) } at src/header/netdb/mod.rs:218:27: 218:39
| 11: Canonical { max_universe: U0, variables: [CanonicalVarInfo { kind: Ty(General(U0)) }, CanonicalVarInfo { kind: Ty(General(U0)) }], value: TypeOf(DefId(4:3599 ~ alloc[66fa]::vec[0]::{{impl}}[0]::new[0]), UserSubsts { substs: [^0], user_self_ty: Some(UserSelfTy { impl_def_id: DefId(4:3597 ~ alloc[66fa]::vec[0]::{{impl}}[0]), self_ty: alloc::vec::Vec<^1> }) }) } at src/header/netdb/mod.rs:218:42: 218:50
| 12: Canonical { max_universe: U0, variables: [], value: Ty(alloc::vec::Vec<*mut i8>) } at src/header/netdb/mod.rs:218:27: 218:39
|
fn  header::netdb::gethostbyaddr(_1: *const platform::types::c_void, _2: u32, _3: i32) -> *mut header::netdb::hostent {
    let mut _0: *mut header::netdb::hostent; // return place in scope 0 at src/header/netdb/mod.rs:186:6: 186:18
    let _4: header::netinet_in::in_addr as UserTypeProjection { base: UserType(0), projs: [] }; // "addr" in scope 0 at src/header/netdb/mod.rs:187:9: 187:13
    let mut _5: *mut header::netinet_in::in_addr; // in scope 0 at src/header/netdb/mod.rs:187:26: 187:45
    let mut _6: *const platform::types::c_void; // in scope 0 at src/header/netdb/mod.rs:187:27: 187:28
    let _8: ();                          // in scope 0 at src/header/netdb/mod.rs:191:5: 191:30
    let mut _9: i32;                     // in scope 0 at src/header/netdb/mod.rs:191:16: 191:29
    let mut _10: bool;                   // in scope 0 at src/header/netdb/mod.rs:192:11: 195:6
    let mut _11: *mut header::netdb::hostent; // in scope 0 at src/header/netdb/mod.rs:193:13: 193:25
    let mut _12: bool;                   // in scope 0 at src/header/netdb/mod.rs:194:10: 194:21
    let mut _13: *mut header::netdb::hostent; // in scope 0 at src/header/netdb/mod.rs:194:10: 194:11
    let mut _15: bool;                   // in scope 0 at src/header/netdb/mod.rs:198:16: 198:28
    let mut _16: *mut *mut i8;           // in scope 0 at src/header/netdb/mod.rs:198:16: 198:18
    let mut _17: bool;                   // in scope 0 at src/header/netdb/mod.rs:201:16: 201:31
    let mut _18: *mut i8;                // in scope 0 at src/header/netdb/mod.rs:201:16: 201:21
    let _20: ();                         // in scope 0 at src/header/netdb/mod.rs:205:13: 205:52
    let mut _21: *mut i8;                // in scope 0 at src/header/netdb/mod.rs:205:13: 205:18
    let mut _22: *mut i8;                // in scope 0 at src/header/netdb/mod.rs:205:27: 205:48
    let mut _23: &mut [i8];              // in scope 0 at src/header/netdb/mod.rs:205:27: 205:35
    let mut _24: &mut [i8; 4];           // in scope 0 at src/header/netdb/mod.rs:205:27: 205:35
    let mut _26: [i8; 4];                // in scope 0 at src/header/netdb/mod.rs:206:60: 206:68
    let mut _27: bool;                   // in scope 0 at src/header/netdb/mod.rs:207:16: 207:40
    let mut _28: u32;                    // in scope 0 at src/header/netdb/mod.rs:207:16: 207:25
    let mut _29: u32;                    // in scope 0 at src/header/netdb/mod.rs:207:29: 207:40
    let _30: ();                         // in scope 0 at src/header/netdb/mod.rs:208:17: 208:42
    let mut _31: i32;                    // in scope 0 at src/header/netdb/mod.rs:208:28: 208:41
    let mut _32: *mut *mut i8;           // in scope 0 at src/header/netdb/mod.rs:211:18: 211:30
    let mut _33: *mut *mut i8;           // in scope 0 at src/header/netdb/mod.rs:211:18: 211:20
    let _35: ();                         // in scope 0 at src/header/netdb/mod.rs:217:5: 217:36
    let mut _36: &mut alloc::vec::Vec<alloc::vec::Vec<u8>>; // in scope 0 at src/header/netdb/mod.rs:217:5: 217:18
    let mut _37: alloc::vec::Vec<u8>;    // in scope 0 at <::alloc::macros::vec macros>:3:1: 3:48
    let mut _38: alloc::boxed::Box<[u8]>; // in scope 0 at <::alloc::macros::vec macros>:3:25: 3:46
    let mut _39: alloc::boxed::Box<[u8; 1]>; // in scope 0 at <::alloc::macros::vec macros>:3:25: 3:46
    let mut _40: alloc::boxed::Box<[u8; 1]>; // in scope 0 at <::alloc::macros::vec macros>:3:25: 3:46
    let _42: ();                         // in scope 0 at src/header/netdb/mod.rs:219:5: 219:39
    let mut _43: &mut alloc::vec::Vec<*mut i8>; // in scope 0 at src/header/netdb/mod.rs:219:5: 219:17
    let mut _44: *mut i8;                // in scope 0 at src/header/netdb/mod.rs:219:23: 219:38
    let mut _45: core::option::Option<alloc::vec::Vec<alloc::vec::Vec<u8>>>; // in scope 0 at src/header/netdb/mod.rs:220:20: 220:39
    let mut _46: alloc::vec::Vec<alloc::vec::Vec<u8>>; // in scope 0 at src/header/netdb/mod.rs:220:25: 220:38
    let mut _47: core::result::Result<alloc::vec::Vec<alloc::vec::Vec<u8>>, i32>; // in scope 0 at src/header/netdb/mod.rs:222:11: 222:28
    let mut _48: header::netinet_in::in_addr; // in scope 0 at src/header/netdb/mod.rs:222:23: 222:27
    let mut _49: isize;                  // in scope 0 at src/header/netdb/mod.rs:223:9: 223:14
    let mut _51: [u8; 4];                // in scope 0 at src/header/netdb/mod.rs:224:31: 224:74
    let mut _52: u32;                    // in scope 0 at src/header/netdb/mod.rs:224:62: 224:73
    let mut _53: *mut i8;                // in scope 0 at src/header/netdb/mod.rs:225:31: 225:74
    let mut _54: *mut u8;                // in scope 0 at src/header/netdb/mod.rs:225:31: 225:59
    let mut _55: &mut [u8];              // in scope 0 at src/header/netdb/mod.rs:225:31: 225:46
    let mut _56: &mut [u8; 4];           // in scope 0 at src/header/netdb/mod.rs:225:31: 225:46
    let mut _57: *mut i8;                // in scope 0 at src/header/netdb/mod.rs:225:76: 225:91
    let mut _59: &[u8];                  // in scope 0 at src/header/netdb/mod.rs:226:29: 226:33
    let mut _60: &[u8];                  // in scope 0 at src/header/netdb/mod.rs:226:29: 226:33
    let mut _61: &alloc::vec::Vec<u8>;   // in scope 0 at src/header/netdb/mod.rs:226:29: 226:33
    let mut _62: &alloc::vec::Vec<u8>;   // in scope 0 at src/header/netdb/mod.rs:226:29: 226:33
    let mut _63: &alloc::vec::Vec<alloc::vec::Vec<u8>>; // in scope 0 at src/header/netdb/mod.rs:226:29: 226:30
    let mut _64: core::option::Option<alloc::vec::Vec<u8>>; // in scope 0 at src/header/netdb/mod.rs:227:25: 227:40
    let mut _65: alloc::vec::Vec<u8>;    // in scope 0 at src/header/netdb/mod.rs:227:30: 227:39
    let mut _66: *mut i8;                // in scope 0 at src/header/netdb/mod.rs:229:25: 229:80
    let mut _67: *mut u8;                // in scope 0 at src/header/netdb/mod.rs:229:25: 229:65
    let mut _68: &mut alloc::vec::Vec<u8>; // in scope 0 at src/header/netdb/mod.rs:229:25: 229:52
    let mut _69: &mut alloc::vec::Vec<u8>; // in scope 0 at src/header/netdb/mod.rs:229:25: 229:52
    let mut _70: core::option::Option<&mut alloc::vec::Vec<u8>>; // in scope 0 at src/header/netdb/mod.rs:229:25: 229:43
    let mut _71: &mut core::option::Option<alloc::vec::Vec<u8>>; // in scope 0 at src/header/netdb/mod.rs:229:25: 229:34
    let mut _72: *mut *mut i8;           // in scope 0 at src/header/netdb/mod.rs:230:28: 230:84
    let mut _73: &mut [*mut i8];         // in scope 0 at src/header/netdb/mod.rs:230:28: 230:55
    let mut _74: &mut [*mut i8];         // in scope 0 at src/header/netdb/mod.rs:230:28: 230:55
    let mut _75: &mut alloc::vec::Vec<*mut i8>; // in scope 0 at src/header/netdb/mod.rs:230:28: 230:40
    let mut _76: i32;                    // in scope 0 at src/header/netdb/mod.rs:231:29: 231:35
    let mut _77: i32;                    // in scope 0 at src/header/netdb/mod.rs:232:27: 232:40
    let mut _78: u32;                    // in scope 0 at src/header/netdb/mod.rs:232:27: 232:33
    let mut _79: *mut *mut i8;           // in scope 0 at src/header/netdb/mod.rs:233:30: 233:57
    let mut _80: &mut [*mut i8];         // in scope 0 at src/header/netdb/mod.rs:233:30: 233:44
    let mut _81: &mut [*mut i8; 2];      // in scope 0 at src/header/netdb/mod.rs:233:30: 233:44
    let mut _82: &mut header::netdb::hostent; // in scope 0 at src/header/netdb/mod.rs:235:13: 235:28
    let mut _83: &mut header::netdb::hostent; // in scope 0 at src/header/netdb/mod.rs:235:13: 235:28
    let mut _85: i32;                    // in scope 0 at src/header/netdb/mod.rs:238:31: 238:32
    let mut _86: bool;                   // in scope 0 at src/header/netdb/mod.rs:242:1: 242:2
    let mut _87: isize;                  // in scope 0 at src/header/netdb/mod.rs:242:1: 242:2
    scope 1 {
        let mut _7: *mut header::netdb::hostent as UserTypeProjection { base: UserType(2), projs: [] }; // "p" in scope 1 at src/header/netdb/mod.rs:190:9: 190:14
        scope 2 {
            let mut _14: *mut *mut i8;   // "cp" in scope 2 at src/header/netdb/mod.rs:196:13: 196:19
            let mut _34: alloc::vec::Vec<alloc::vec::Vec<u8>> as UserTypeProjection { base: UserType(6), projs: [] }; // "_host_aliases" in scope 2 at src/header/netdb/mod.rs:216:9: 216:26
            scope 3 {
                let mut _19: [i8; 4] as UserTypeProjection { base: UserType(4), projs: [] }; // "cp_slice" in scope 3 at src/header/netdb/mod.rs:204:17: 204:29
                scope 4 {
                    let _25: u32;        // "cp_s_addr" in scope 4 at src/header/netdb/mod.rs:206:17: 206:26
                    scope 5 {
                    }
                }
            }
            scope 6 {
                let mut _41: alloc::vec::Vec<*mut i8> as UserTypeProjection { base: UserType(10), projs: [] }; // "host_aliases" in scope 6 at src/header/netdb/mod.rs:218:9: 218:25
                scope 7 {
                    let _50: alloc::vec::Vec<alloc::vec::Vec<u8>>; // "s" in scope 7 at src/header/netdb/mod.rs:223:12: 223:13
                    let _84: i32;        // "e" in scope 7 at src/header/netdb/mod.rs:237:13: 237:14
                    scope 8 {
                        let _58: alloc::vec::Vec<u8>; // "host_name" in scope 8 at src/header/netdb/mod.rs:226:17: 226:26
                        scope 9 {
                        }
                    }
                    scope 10 {
                    }
                }
            }
        }
    }

    bb0: {
        _86 = const false;               // bb0[0]: scope 0 at src/header/netdb/mod.rs:187:9: 187:13
                                         // ty::Const
                                         // + ty: bool
                                         // + val: Scalar(0x00)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:187:9: 187:13
                                         // + ty: bool
                                         // + literal: Const { ty: bool, val: Scalar(0x00) }
        StorageLive(_4);                 // bb0[1]: scope 0 at src/header/netdb/mod.rs:187:9: 187:13
        StorageLive(_5);                 // bb0[2]: scope 0 at src/header/netdb/mod.rs:187:26: 187:45
        StorageLive(_6);                 // bb0[3]: scope 0 at src/header/netdb/mod.rs:187:27: 187:28
        _6 = _1;                         // bb0[4]: scope 0 at src/header/netdb/mod.rs:187:27: 187:28
        _5 = move _6 as *mut header::netinet_in::in_addr (Misc); // bb0[5]: scope 0 at src/header/netdb/mod.rs:187:26: 187:45
        StorageDead(_6);                 // bb0[6]: scope 0 at src/header/netdb/mod.rs:187:44: 187:45
        _4 = (*_5);                      // bb0[7]: scope 0 at src/header/netdb/mod.rs:187:25: 187:45
        StorageDead(_5);                 // bb0[8]: scope 0 at src/header/netdb/mod.rs:187:45: 187:46
        StorageLive(_7);                 // bb0[9]: scope 1 at src/header/netdb/mod.rs:190:9: 190:14
        StorageLive(_8);                 // bb0[10]: scope 2 at src/header/netdb/mod.rs:191:5: 191:30
        StorageLive(_9);                 // bb0[11]: scope 2 at src/header/netdb/mod.rs:191:16: 191:29
        _9 = (header::netdb::host::HOST_STAYOPEN: i32); // bb0[12]: scope 2 at src/header/netdb/mod.rs:191:16: 191:29
        _8 = const header::netdb::host::sethostent(move _9) -> bb1; // bb0[13]: scope 2 at src/header/netdb/mod.rs:191:5: 191:30
                                         // ty::Const
                                         // + ty: unsafe extern "C" fn(i32) {header::netdb::host::sethostent}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:191:5: 191:15
                                         // + ty: unsafe extern "C" fn(i32) {header::netdb::host::sethostent}
                                         // + literal: Const { ty: unsafe extern "C" fn(i32) {header::netdb::host::sethostent}, val: Scalar(<ZST>) }
    }

    bb1: {
        StorageDead(_9);                 // bb1[0]: scope 2 at src/header/netdb/mod.rs:191:29: 191:30
        StorageDead(_8);                 // bb1[1]: scope 2 at src/header/netdb/mod.rs:191:30: 191:31
        goto -> bb2;                     // bb1[2]: scope 2 at src/header/netdb/mod.rs:192:5: 213:6
    }

    bb2: {
        StorageLive(_10);                // bb2[0]: scope 2 at src/header/netdb/mod.rs:192:11: 195:6
        StorageLive(_11);                // bb2[1]: scope 2 at src/header/netdb/mod.rs:193:13: 193:25
        _11 = const header::netdb::host::gethostent() -> bb3; // bb2[2]: scope 2 at src/header/netdb/mod.rs:193:13: 193:25
                                         // ty::Const
                                         // + ty: unsafe extern "C" fn() -> *mut header::netdb::hostent {header::netdb::host::gethostent}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:193:13: 193:23
                                         // + ty: unsafe extern "C" fn() -> *mut header::netdb::hostent {header::netdb::host::gethostent}
                                         // + literal: Const { ty: unsafe extern "C" fn() -> *mut header::netdb::hostent {header::netdb::host::gethostent}, val: Scalar(<ZST>) }
    }

    bb3: {
        _7 = move _11;                   // bb3[0]: scope 2 at src/header/netdb/mod.rs:193:9: 193:25
        StorageDead(_11);                // bb3[1]: scope 2 at src/header/netdb/mod.rs:193:24: 193:25
        StorageLive(_12);                // bb3[2]: scope 2 at src/header/netdb/mod.rs:194:10: 194:21
        StorageLive(_13);                // bb3[3]: scope 2 at src/header/netdb/mod.rs:194:10: 194:11
        _13 = _7;                        // bb3[4]: scope 2 at src/header/netdb/mod.rs:194:10: 194:11
        _12 = const core::ptr::<impl *mut header::netdb::hostent>::is_null(move _13) -> bb4; // bb3[5]: scope 2 at src/header/netdb/mod.rs:194:10: 194:21
                                         // ty::Const
                                         // + ty: fn(*mut header::netdb::hostent) -> bool {core::ptr::<impl *mut header::netdb::hostent>::is_null}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:194:12: 194:19
                                         // + ty: fn(*mut header::netdb::hostent) -> bool {core::ptr::<impl *mut header::netdb::hostent>::is_null}
                                         // + literal: Const { ty: fn(*mut header::netdb::hostent) -> bool {core::ptr::<impl *mut header::netdb::hostent>::is_null}, val: Scalar(<ZST>) }
    }

    bb4: {
        StorageDead(_13);                // bb4[0]: scope 2 at src/header/netdb/mod.rs:194:20: 194:21
        _10 = Not(move _12);             // bb4[1]: scope 2 at src/header/netdb/mod.rs:194:9: 194:21
        StorageDead(_12);                // bb4[2]: scope 2 at src/header/netdb/mod.rs:194:20: 194:21
        switchInt(_10) -> [false: bb5, otherwise: bb6]; // bb4[3]: scope 2 at src/header/netdb/mod.rs:192:5: 213:6
    }

    bb5: {
        StorageDead(_10);                // bb5[0]: scope 2 at src/header/netdb/mod.rs:195:5: 195:6
        StorageLive(_34);                // bb5[1]: scope 2 at src/header/netdb/mod.rs:216:9: 216:26
        _34 = const alloc::vec::Vec::<alloc::vec::Vec<u8>>::new() -> bb23; // bb5[2]: scope 2 at src/header/netdb/mod.rs:216:43: 216:53
                                         // ty::Const
                                         // + ty: fn() -> alloc::vec::Vec<alloc::vec::Vec<u8>> {alloc::vec::Vec::<alloc::vec::Vec<u8>>::new}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:216:43: 216:51
                                         // + ty: fn() -> alloc::vec::Vec<alloc::vec::Vec<u8>> {alloc::vec::Vec::<alloc::vec::Vec<u8>>::new}
                                         // + user_ty: UserType(7)
                                         // + literal: Const { ty: fn() -> alloc::vec::Vec<alloc::vec::Vec<u8>> {alloc::vec::Vec::<alloc::vec::Vec<u8>>::new}, val: Scalar(<ZST>) }
    }

    bb6: {
        StorageLive(_14);                // bb6[0]: scope 2 at src/header/netdb/mod.rs:196:13: 196:19
        _14 = ((*_7).4: *mut *mut i8);   // bb6[1]: scope 2 at src/header/netdb/mod.rs:196:22: 196:38
        goto -> bb8;                     // bb6[2]: scope 3 at src/header/netdb/mod.rs:197:9: 212:10
    }

    bb7: {
        StorageDead(_14);                // bb7[0]: scope 2 at src/header/netdb/mod.rs:213:5: 213:6
        StorageDead(_10);                // bb7[1]: scope 2 at src/header/netdb/mod.rs:195:5: 195:6
        goto -> bb2;                     // bb7[2]: scope 2 at src/header/netdb/mod.rs:192:5: 213:6
    }

    bb8: {
        StorageLive(_15);                // bb8[0]: scope 3 at src/header/netdb/mod.rs:198:16: 198:28
        StorageLive(_16);                // bb8[1]: scope 3 at src/header/netdb/mod.rs:198:16: 198:18
        _16 = _14;                       // bb8[2]: scope 3 at src/header/netdb/mod.rs:198:16: 198:18
        _15 = const core::ptr::<impl *mut *mut i8>::is_null(move _16) -> bb9; // bb8[3]: scope 3 at src/header/netdb/mod.rs:198:16: 198:28
                                         // ty::Const
                                         // + ty: fn(*mut *mut i8) -> bool {core::ptr::<impl *mut *mut i8>::is_null}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:198:19: 198:26
                                         // + ty: fn(*mut *mut i8) -> bool {core::ptr::<impl *mut *mut i8>::is_null}
                                         // + literal: Const { ty: fn(*mut *mut i8) -> bool {core::ptr::<impl *mut *mut i8>::is_null}, val: Scalar(<ZST>) }
    }

    bb9: {
        StorageDead(_16);                // bb9[0]: scope 3 at src/header/netdb/mod.rs:198:27: 198:28
        switchInt(_15) -> [false: bb10, otherwise: bb11]; // bb9[1]: scope 3 at src/header/netdb/mod.rs:198:13: 200:14
    }

    bb10: {
        StorageDead(_15);                // bb10[0]: scope 3 at src/header/netdb/mod.rs:200:13: 200:14
        StorageLive(_17);                // bb10[1]: scope 3 at src/header/netdb/mod.rs:201:16: 201:31
        StorageLive(_18);                // bb10[2]: scope 3 at src/header/netdb/mod.rs:201:16: 201:21
        _18 = (*_14);                    // bb10[3]: scope 3 at src/header/netdb/mod.rs:201:16: 201:21
        _17 = const core::ptr::<impl *mut i8>::is_null(move _18) -> bb12; // bb10[4]: scope 3 at src/header/netdb/mod.rs:201:16: 201:31
                                         // ty::Const
                                         // + ty: fn(*mut i8) -> bool {core::ptr::<impl *mut i8>::is_null}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:201:22: 201:29
                                         // + ty: fn(*mut i8) -> bool {core::ptr::<impl *mut i8>::is_null}
                                         // + literal: Const { ty: fn(*mut i8) -> bool {core::ptr::<impl *mut i8>::is_null}, val: Scalar(<ZST>) }
    }

    bb11: {
        StorageDead(_15);                // bb11[0]: scope 3 at src/header/netdb/mod.rs:200:13: 200:14
        goto -> bb7;                     // bb11[1]: scope 3 at src/header/netdb/mod.rs:199:17: 199:22
    }

    bb12: {
        StorageDead(_18);                // bb12[0]: scope 3 at src/header/netdb/mod.rs:201:30: 201:31
        switchInt(_17) -> [false: bb13, otherwise: bb14]; // bb12[1]: scope 3 at src/header/netdb/mod.rs:201:13: 203:14
    }

    bb13: {
        StorageDead(_17);                // bb13[0]: scope 3 at src/header/netdb/mod.rs:203:13: 203:14
        StorageLive(_19);                // bb13[1]: scope 3 at src/header/netdb/mod.rs:204:17: 204:29
        _19 = [const 0i8; 4];            // bb13[2]: scope 3 at src/header/netdb/mod.rs:204:41: 204:49
                                         // ty::Const
                                         // + ty: i8
                                         // + val: Scalar(0x00)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:204:42: 204:45
                                         // + ty: i8
                                         // + literal: Const { ty: i8, val: Scalar(0x00) }
        StorageLive(_20);                // bb13[3]: scope 4 at src/header/netdb/mod.rs:205:13: 205:52
        StorageLive(_21);                // bb13[4]: scope 4 at src/header/netdb/mod.rs:205:13: 205:18
        _21 = (*_14);                    // bb13[5]: scope 4 at src/header/netdb/mod.rs:205:13: 205:18
        StorageLive(_22);                // bb13[6]: scope 4 at src/header/netdb/mod.rs:205:27: 205:48
        StorageLive(_23);                // bb13[7]: scope 4 at src/header/netdb/mod.rs:205:27: 205:35
        StorageLive(_24);                // bb13[8]: scope 4 at src/header/netdb/mod.rs:205:27: 205:35
        _24 = &mut _19;                  // bb13[9]: scope 4 at src/header/netdb/mod.rs:205:27: 205:35
        _23 = move _24 as &mut [i8] (Pointer(Unsize)); // bb13[10]: scope 4 at src/header/netdb/mod.rs:205:27: 205:35
        StorageDead(_24);                // bb13[11]: scope 4 at src/header/netdb/mod.rs:205:34: 205:35
        _22 = const core::slice::<impl [i8]>::as_mut_ptr(move _23) -> bb15; // bb13[12]: scope 4 at src/header/netdb/mod.rs:205:27: 205:48
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r mut [i8]) -> *mut i8 {core::slice::<impl [i8]>::as_mut_ptr}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:205:36: 205:46
                                         // + ty: for<'r> fn(&'r mut [i8]) -> *mut i8 {core::slice::<impl [i8]>::as_mut_ptr}
                                         // + literal: Const { ty: for<'r> fn(&'r mut [i8]) -> *mut i8 {core::slice::<impl [i8]>::as_mut_ptr}, val: Scalar(<ZST>) }
    }

    bb14: {
        StorageDead(_17);                // bb14[0]: scope 3 at src/header/netdb/mod.rs:203:13: 203:14
        goto -> bb7;                     // bb14[1]: scope 3 at src/header/netdb/mod.rs:202:17: 202:22
    }

    bb15: {
        StorageDead(_23);                // bb15[0]: scope 4 at src/header/netdb/mod.rs:205:47: 205:48
        _20 = const core::ptr::<impl *mut i8>::copy_to(move _21, move _22, const 4usize) -> bb16; // bb15[1]: scope 4 at src/header/netdb/mod.rs:205:13: 205:52
                                         // ty::Const
                                         // + ty: unsafe fn(*mut i8, *mut i8, usize) {core::ptr::<impl *mut i8>::copy_to}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:205:19: 205:26
                                         // + ty: unsafe fn(*mut i8, *mut i8, usize) {core::ptr::<impl *mut i8>::copy_to}
                                         // + literal: Const { ty: unsafe fn(*mut i8, *mut i8, usize) {core::ptr::<impl *mut i8>::copy_to}, val: Scalar(<ZST>) }
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Scalar(0x0000000000000004)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:205:50: 205:51
                                         // + ty: usize
                                         // + literal: Const { ty: usize, val: Scalar(0x0000000000000004) }
    }

    bb16: {
        StorageDead(_22);                // bb16[0]: scope 4 at src/header/netdb/mod.rs:205:51: 205:52
        StorageDead(_21);                // bb16[1]: scope 4 at src/header/netdb/mod.rs:205:51: 205:52
        StorageDead(_20);                // bb16[2]: scope 4 at src/header/netdb/mod.rs:205:52: 205:53
        StorageLive(_25);                // bb16[3]: scope 4 at src/header/netdb/mod.rs:206:17: 206:26
        StorageLive(_26);                // bb16[4]: scope 4 at src/header/netdb/mod.rs:206:60: 206:68
        _26 = _19;                       // bb16[5]: scope 4 at src/header/netdb/mod.rs:206:60: 206:68
        _25 = const core::intrinsics::transmute::<[i8; 4], u32>(move _26) -> bb17; // bb16[6]: scope 4 at src/header/netdb/mod.rs:206:29: 206:69
                                         // ty::Const
                                         // + ty: unsafe extern "rust-intrinsic" fn([i8; 4]) -> u32 {core::intrinsics::transmute::<[i8; 4], u32>}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:206:29: 206:59
                                         // + ty: unsafe extern "rust-intrinsic" fn([i8; 4]) -> u32 {core::intrinsics::transmute::<[i8; 4], u32>}
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn([i8; 4]) -> u32 {core::intrinsics::transmute::<[i8; 4], u32>}, val: Scalar(<ZST>) }
    }

    bb17: {
        StorageDead(_26);                // bb17[0]: scope 4 at src/header/netdb/mod.rs:206:68: 206:69
        StorageLive(_27);                // bb17[1]: scope 5 at src/header/netdb/mod.rs:207:16: 207:40
        StorageLive(_28);                // bb17[2]: scope 5 at src/header/netdb/mod.rs:207:16: 207:25
        _28 = _25;                       // bb17[3]: scope 5 at src/header/netdb/mod.rs:207:16: 207:25
        StorageLive(_29);                // bb17[4]: scope 5 at src/header/netdb/mod.rs:207:29: 207:40
        _29 = (_4.0: u32);               // bb17[5]: scope 5 at src/header/netdb/mod.rs:207:29: 207:40
        _27 = Eq(move _28, move _29);    // bb17[6]: scope 5 at src/header/netdb/mod.rs:207:16: 207:40
        StorageDead(_29);                // bb17[7]: scope 5 at src/header/netdb/mod.rs:207:39: 207:40
        StorageDead(_28);                // bb17[8]: scope 5 at src/header/netdb/mod.rs:207:39: 207:40
        switchInt(_27) -> [false: bb18, otherwise: bb19]; // bb17[9]: scope 5 at src/header/netdb/mod.rs:207:13: 210:14
    }

    bb18: {
        StorageDead(_27);                // bb18[0]: scope 5 at src/header/netdb/mod.rs:210:13: 210:14
        StorageLive(_32);                // bb18[1]: scope 5 at src/header/netdb/mod.rs:211:18: 211:30
        StorageLive(_33);                // bb18[2]: scope 5 at src/header/netdb/mod.rs:211:18: 211:20
        _33 = _14;                       // bb18[3]: scope 5 at src/header/netdb/mod.rs:211:18: 211:20
        _32 = const core::ptr::<impl *mut *mut i8>::offset(move _33, const 1isize) -> bb22; // bb18[4]: scope 5 at src/header/netdb/mod.rs:211:18: 211:30
                                         // ty::Const
                                         // + ty: unsafe fn(*mut *mut i8, isize) -> *mut *mut i8 {core::ptr::<impl *mut *mut i8>::offset}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:211:21: 211:27
                                         // + ty: unsafe fn(*mut *mut i8, isize) -> *mut *mut i8 {core::ptr::<impl *mut *mut i8>::offset}
                                         // + literal: Const { ty: unsafe fn(*mut *mut i8, isize) -> *mut *mut i8 {core::ptr::<impl *mut *mut i8>::offset}, val: Scalar(<ZST>) }
                                         // ty::Const
                                         // + ty: isize
                                         // + val: Scalar(0x0000000000000001)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:211:28: 211:29
                                         // + ty: isize
                                         // + literal: Const { ty: isize, val: Scalar(0x0000000000000001) }
    }

    bb19: {
        StorageLive(_30);                // bb19[0]: scope 5 at src/header/netdb/mod.rs:208:17: 208:42
        StorageLive(_31);                // bb19[1]: scope 5 at src/header/netdb/mod.rs:208:28: 208:41
        _31 = (header::netdb::host::HOST_STAYOPEN: i32); // bb19[2]: scope 5 at src/header/netdb/mod.rs:208:28: 208:41
        _30 = const header::netdb::host::sethostent(move _31) -> bb20; // bb19[3]: scope 5 at src/header/netdb/mod.rs:208:17: 208:42
                                         // ty::Const
                                         // + ty: unsafe extern "C" fn(i32) {header::netdb::host::sethostent}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:208:17: 208:27
                                         // + ty: unsafe extern "C" fn(i32) {header::netdb::host::sethostent}
                                         // + literal: Const { ty: unsafe extern "C" fn(i32) {header::netdb::host::sethostent}, val: Scalar(<ZST>) }
    }

    bb20: {
        StorageDead(_31);                // bb20[0]: scope 5 at src/header/netdb/mod.rs:208:41: 208:42
        StorageDead(_30);                // bb20[1]: scope 5 at src/header/netdb/mod.rs:208:42: 208:43
        _0 = _7;                         // bb20[2]: scope 5 at src/header/netdb/mod.rs:209:24: 209:25
        StorageDead(_27);                // bb20[3]: scope 5 at src/header/netdb/mod.rs:210:13: 210:14
        StorageDead(_25);                // bb20[4]: scope 4 at src/header/netdb/mod.rs:212:9: 212:10
        StorageDead(_19);                // bb20[5]: scope 3 at src/header/netdb/mod.rs:212:9: 212:10
        StorageDead(_14);                // bb20[6]: scope 2 at src/header/netdb/mod.rs:213:5: 213:6
        StorageDead(_10);                // bb20[7]: scope 2 at src/header/netdb/mod.rs:195:5: 195:6
        StorageDead(_7);                 // bb20[8]: scope 1 at src/header/netdb/mod.rs:242:1: 242:2
        StorageDead(_4);                 // bb20[9]: scope 0 at src/header/netdb/mod.rs:242:1: 242:2
        goto -> bb21;                    // bb20[10]: scope 0 at src/header/netdb/mod.rs:209:17: 209:25
    }

    bb21: {
        return;                          // bb21[0]: scope 0 at src/header/netdb/mod.rs:242:2: 242:2
    }

    bb22: {
        StorageDead(_33);                // bb22[0]: scope 5 at src/header/netdb/mod.rs:211:29: 211:30
        _14 = move _32;                  // bb22[1]: scope 5 at src/header/netdb/mod.rs:211:13: 211:30
        StorageDead(_32);                // bb22[2]: scope 5 at src/header/netdb/mod.rs:211:29: 211:30
        StorageDead(_25);                // bb22[3]: scope 4 at src/header/netdb/mod.rs:212:9: 212:10
        StorageDead(_19);                // bb22[4]: scope 3 at src/header/netdb/mod.rs:212:9: 212:10
        goto -> bb8;                     // bb22[5]: scope 3 at src/header/netdb/mod.rs:197:9: 212:10
    }

    bb23: {
        StorageLive(_35);                // bb23[0]: scope 6 at src/header/netdb/mod.rs:217:5: 217:36
        StorageLive(_36);                // bb23[1]: scope 6 at src/header/netdb/mod.rs:217:5: 217:18
        _36 = &mut _34;                  // bb23[2]: scope 6 at src/header/netdb/mod.rs:217:5: 217:18
        StorageLive(_37);                // bb23[3]: scope 6 at <::alloc::macros::vec macros>:3:1: 3:48
        StorageLive(_38);                // bb23[4]: scope 6 at <::alloc::macros::vec macros>:3:25: 3:46
        StorageLive(_39);                // bb23[5]: scope 6 at <::alloc::macros::vec macros>:3:25: 3:46
        StorageLive(_40);                // bb23[6]: scope 6 at <::alloc::macros::vec macros>:3:25: 3:46
        _40 = Box([u8; 1]);              // bb23[7]: scope 6 at <::alloc::macros::vec macros>:3:25: 3:46
        (*_40) = [const 0u8];            // bb23[8]: scope 6 at <::alloc::macros::vec macros>:3:29: 3:46
                                         // ty::Const
                                         // + ty: u8
                                         // + val: Scalar(0x00)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:217:29: 217:34
                                         // + ty: u8
                                         // + literal: Const { ty: u8, val: Scalar(0x00) }
        _39 = move _40;                  // bb23[9]: scope 6 at <::alloc::macros::vec macros>:3:25: 3:46
        _38 = move _39 as alloc::boxed::Box<[u8]> (Pointer(Unsize)); // bb23[10]: scope 6 at <::alloc::macros::vec macros>:3:25: 3:46
        StorageDead(_40);                // bb23[11]: scope 6 at <::alloc::macros::vec macros>:3:45: 3:46
        StorageDead(_39);                // bb23[12]: scope 6 at <::alloc::macros::vec macros>:3:45: 3:46
        _37 = const alloc::slice::<impl [u8]>::into_vec(move _38) -> bb24; // bb23[13]: scope 6 at <::alloc::macros::vec macros>:3:1: 3:48
                                         // ty::Const
                                         // + ty: fn(alloc::boxed::Box<[u8]>) -> alloc::vec::Vec<u8> {alloc::slice::<impl [u8]>::into_vec}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: <::alloc::macros::vec macros>:3:1: 3:22
                                         // + ty: fn(alloc::boxed::Box<[u8]>) -> alloc::vec::Vec<u8> {alloc::slice::<impl [u8]>::into_vec}
                                         // + user_ty: UserType(9)
                                         // + literal: Const { ty: fn(alloc::boxed::Box<[u8]>) -> alloc::vec::Vec<u8> {alloc::slice::<impl [u8]>::into_vec}, val: Scalar(<ZST>) }
    }

    bb24: {
        StorageDead(_38);                // bb24[0]: scope 6 at <::alloc::macros::vec macros>:3:47: 3:48
        _35 = const alloc::vec::Vec::<alloc::vec::Vec<u8>>::push(move _36, move _37) -> bb25; // bb24[1]: scope 6 at src/header/netdb/mod.rs:217:5: 217:36
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r mut alloc::vec::Vec<alloc::vec::Vec<u8>>, alloc::vec::Vec<u8>) {alloc::vec::Vec::<alloc::vec::Vec<u8>>::push}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:217:19: 217:23
                                         // + ty: for<'r> fn(&'r mut alloc::vec::Vec<alloc::vec::Vec<u8>>, alloc::vec::Vec<u8>) {alloc::vec::Vec::<alloc::vec::Vec<u8>>::push}
                                         // + literal: Const { ty: for<'r> fn(&'r mut alloc::vec::Vec<alloc::vec::Vec<u8>>, alloc::vec::Vec<u8>) {alloc::vec::Vec::<alloc::vec::Vec<u8>>::push}, val: Scalar(<ZST>) }
    }

    bb25: {
        StorageDead(_37);                // bb25[0]: scope 6 at src/header/netdb/mod.rs:217:35: 217:36
        StorageDead(_36);                // bb25[1]: scope 6 at src/header/netdb/mod.rs:217:35: 217:36
        StorageDead(_35);                // bb25[2]: scope 6 at src/header/netdb/mod.rs:217:36: 217:37
        StorageLive(_41);                // bb25[3]: scope 6 at src/header/netdb/mod.rs:218:9: 218:25
        _41 = const alloc::vec::Vec::<*mut i8>::new() -> bb26; // bb25[4]: scope 6 at src/header/netdb/mod.rs:218:42: 218:52
                                         // ty::Const
                                         // + ty: fn() -> alloc::vec::Vec<*mut i8> {alloc::vec::Vec::<*mut i8>::new}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:218:42: 218:50
                                         // + ty: fn() -> alloc::vec::Vec<*mut i8> {alloc::vec::Vec::<*mut i8>::new}
                                         // + user_ty: UserType(11)
                                         // + literal: Const { ty: fn() -> alloc::vec::Vec<*mut i8> {alloc::vec::Vec::<*mut i8>::new}, val: Scalar(<ZST>) }
    }

    bb26: {
        StorageLive(_42);                // bb26[0]: scope 7 at src/header/netdb/mod.rs:219:5: 219:39
        StorageLive(_43);                // bb26[1]: scope 7 at src/header/netdb/mod.rs:219:5: 219:17
        _43 = &mut _41;                  // bb26[2]: scope 7 at src/header/netdb/mod.rs:219:5: 219:17
        StorageLive(_44);                // bb26[3]: scope 7 at src/header/netdb/mod.rs:219:23: 219:38
        _44 = const core::ptr::null_mut::<i8>() -> bb27; // bb26[4]: scope 7 at src/header/netdb/mod.rs:219:23: 219:38
                                         // ty::Const
                                         // + ty: fn() -> *mut i8 {core::ptr::null_mut::<i8>}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:219:23: 219:36
                                         // + ty: fn() -> *mut i8 {core::ptr::null_mut::<i8>}
                                         // + literal: Const { ty: fn() -> *mut i8 {core::ptr::null_mut::<i8>}, val: Scalar(<ZST>) }
    }

    bb27: {
        _42 = const alloc::vec::Vec::<*mut i8>::push(move _43, move _44) -> bb28; // bb27[0]: scope 7 at src/header/netdb/mod.rs:219:5: 219:39
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r mut alloc::vec::Vec<*mut i8>, *mut i8) {alloc::vec::Vec::<*mut i8>::push}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:219:18: 219:22
                                         // + ty: for<'r> fn(&'r mut alloc::vec::Vec<*mut i8>, *mut i8) {alloc::vec::Vec::<*mut i8>::push}
                                         // + literal: Const { ty: for<'r> fn(&'r mut alloc::vec::Vec<*mut i8>, *mut i8) {alloc::vec::Vec::<*mut i8>::push}, val: Scalar(<ZST>) }
    }

    bb28: {
        StorageDead(_44);                // bb28[0]: scope 7 at src/header/netdb/mod.rs:219:38: 219:39
        StorageDead(_43);                // bb28[1]: scope 7 at src/header/netdb/mod.rs:219:38: 219:39
        StorageDead(_42);                // bb28[2]: scope 7 at src/header/netdb/mod.rs:219:39: 219:40
        StorageLive(_45);                // bb28[3]: scope 7 at src/header/netdb/mod.rs:220:20: 220:39
        StorageLive(_46);                // bb28[4]: scope 7 at src/header/netdb/mod.rs:220:25: 220:38
        _46 = move _34;                  // bb28[5]: scope 7 at src/header/netdb/mod.rs:220:25: 220:38
        ((_45 as Some).0: alloc::vec::Vec<alloc::vec::Vec<u8>>) = move _46; // bb28[6]: scope 7 at src/header/netdb/mod.rs:220:20: 220:39
        discriminant(_45) = 1;           // bb28[7]: scope 7 at src/header/netdb/mod.rs:220:20: 220:39
        StorageDead(_46);                // bb28[8]: scope 7 at src/header/netdb/mod.rs:220:38: 220:39
        drop((header::netdb::host::HOST_ALIASES: core::option::Option<alloc::vec::Vec<alloc::vec::Vec<u8>>>)) -> bb49; // bb28[9]: scope 7 at src/header/netdb/mod.rs:220:5: 220:17
    }

    bb29: {
        StorageDead(_48);                // bb29[0]: scope 7 at src/header/netdb/mod.rs:222:27: 222:28
        _49 = discriminant(_47);         // bb29[1]: scope 7 at src/header/netdb/mod.rs:223:9: 223:14
        switchInt(move _49) -> [0isize: bb31, 1isize: bb45, otherwise: bb30]; // bb29[2]: scope 7 at src/header/netdb/mod.rs:223:9: 223:14
    }

    bb30: {
        unreachable;                     // bb30[0]: scope 7 at src/header/netdb/mod.rs:222:11: 222:28
    }

    bb31: {
        StorageLive(_50);                // bb31[0]: scope 7 at src/header/netdb/mod.rs:223:12: 223:13
        _86 = const false;               // bb31[1]: scope 7 at src/header/netdb/mod.rs:223:12: 223:13
                                         // ty::Const
                                         // + ty: bool
                                         // + val: Scalar(0x00)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:223:12: 223:13
                                         // + ty: bool
                                         // + literal: Const { ty: bool, val: Scalar(0x00) }
        _50 = move ((_47 as Ok).0: alloc::vec::Vec<alloc::vec::Vec<u8>>); // bb31[2]: scope 7 at src/header/netdb/mod.rs:223:12: 223:13
        StorageLive(_51);                // bb31[3]: scope 8 at src/header/netdb/mod.rs:224:31: 224:74
        StorageLive(_52);                // bb31[4]: scope 8 at src/header/netdb/mod.rs:224:62: 224:73
        _52 = (_4.0: u32);               // bb31[5]: scope 8 at src/header/netdb/mod.rs:224:62: 224:73
        _51 = const core::intrinsics::transmute::<u32, [u8; 4]>(move _52) -> bb32; // bb31[6]: scope 8 at src/header/netdb/mod.rs:224:31: 224:74
                                         // ty::Const
                                         // + ty: unsafe extern "rust-intrinsic" fn(u32) -> [u8; 4] {core::intrinsics::transmute::<u32, [u8; 4]>}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:224:31: 224:61
                                         // + ty: unsafe extern "rust-intrinsic" fn(u32) -> [u8; 4] {core::intrinsics::transmute::<u32, [u8; 4]>}
                                         // + literal: Const { ty: unsafe extern "rust-intrinsic" fn(u32) -> [u8; 4] {core::intrinsics::transmute::<u32, [u8; 4]>}, val: Scalar(<ZST>) }
    }

    bb32: {
        StorageDead(_52);                // bb32[0]: scope 8 at src/header/netdb/mod.rs:224:73: 224:74
        (header::netdb::host::_HOST_ADDR_LIST: [u8; 4]) = move _51; // bb32[1]: scope 8 at src/header/netdb/mod.rs:224:13: 224:74
        StorageDead(_51);                // bb32[2]: scope 8 at src/header/netdb/mod.rs:224:73: 224:74
        StorageLive(_53);                // bb32[3]: scope 8 at src/header/netdb/mod.rs:225:31: 225:74
        StorageLive(_54);                // bb32[4]: scope 8 at src/header/netdb/mod.rs:225:31: 225:59
        StorageLive(_55);                // bb32[5]: scope 8 at src/header/netdb/mod.rs:225:31: 225:46
        StorageLive(_56);                // bb32[6]: scope 8 at src/header/netdb/mod.rs:225:31: 225:46
        _56 = &mut (header::netdb::host::_HOST_ADDR_LIST: [u8; 4]); // bb32[7]: scope 8 at src/header/netdb/mod.rs:225:31: 225:46
        _55 = move _56 as &mut [u8] (Pointer(Unsize)); // bb32[8]: scope 8 at src/header/netdb/mod.rs:225:31: 225:46
        StorageDead(_56);                // bb32[9]: scope 8 at src/header/netdb/mod.rs:225:45: 225:46
        _54 = const core::slice::<impl [u8]>::as_mut_ptr(move _55) -> bb33; // bb32[10]: scope 8 at src/header/netdb/mod.rs:225:31: 225:59
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r mut [u8]) -> *mut u8 {core::slice::<impl [u8]>::as_mut_ptr}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:225:47: 225:57
                                         // + ty: for<'r> fn(&'r mut [u8]) -> *mut u8 {core::slice::<impl [u8]>::as_mut_ptr}
                                         // + literal: Const { ty: for<'r> fn(&'r mut [u8]) -> *mut u8 {core::slice::<impl [u8]>::as_mut_ptr}, val: Scalar(<ZST>) }
    }

    bb33: {
        StorageDead(_55);                // bb33[0]: scope 8 at src/header/netdb/mod.rs:225:58: 225:59
        _53 = move _54 as *mut i8 (Misc); // bb33[1]: scope 8 at src/header/netdb/mod.rs:225:31: 225:74
        StorageDead(_54);                // bb33[2]: scope 8 at src/header/netdb/mod.rs:225:73: 225:74
        StorageLive(_57);                // bb33[3]: scope 8 at src/header/netdb/mod.rs:225:76: 225:91
        _57 = const core::ptr::null_mut::<i8>() -> bb34; // bb33[4]: scope 8 at src/header/netdb/mod.rs:225:76: 225:91
                                         // ty::Const
                                         // + ty: fn() -> *mut i8 {core::ptr::null_mut::<i8>}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:225:76: 225:89
                                         // + ty: fn() -> *mut i8 {core::ptr::null_mut::<i8>}
                                         // + literal: Const { ty: fn() -> *mut i8 {core::ptr::null_mut::<i8>}, val: Scalar(<ZST>) }
    }

    bb34: {
        (header::netdb::host::HOST_ADDR_LIST: [*mut i8; 2]) = [move _53, move _57]; // bb34[0]: scope 8 at src/header/netdb/mod.rs:225:13: 225:92
        StorageDead(_57);                // bb34[1]: scope 8 at src/header/netdb/mod.rs:225:91: 225:92
        StorageDead(_53);                // bb34[2]: scope 8 at src/header/netdb/mod.rs:225:91: 225:92
        StorageLive(_58);                // bb34[3]: scope 8 at src/header/netdb/mod.rs:226:17: 226:26
        StorageLive(_59);                // bb34[4]: scope 8 at src/header/netdb/mod.rs:226:29: 226:33
        StorageLive(_60);                // bb34[5]: scope 8 at src/header/netdb/mod.rs:226:29: 226:33
        StorageLive(_61);                // bb34[6]: scope 8 at src/header/netdb/mod.rs:226:29: 226:33
        StorageLive(_62);                // bb34[7]: scope 8 at src/header/netdb/mod.rs:226:29: 226:33
        StorageLive(_63);                // bb34[8]: scope 8 at src/header/netdb/mod.rs:226:29: 226:30
        _63 = &_50;                      // bb34[9]: scope 8 at src/header/netdb/mod.rs:226:29: 226:30
        _62 = const <alloc::vec::Vec<alloc::vec::Vec<u8>> as core::ops::Index<usize>>::index(move _63, const 0usize) -> bb35; // bb34[10]: scope 8 at src/header/netdb/mod.rs:226:29: 226:33
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r alloc::vec::Vec<alloc::vec::Vec<u8>>, usize) -> &'r <alloc::vec::Vec<alloc::vec::Vec<u8>> as core::ops::Index<usize>>::Output {<alloc::vec::Vec<alloc::vec::Vec<u8>> as core::ops::Index<usize>>::index}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:226:29: 226:33
                                         // + ty: for<'r> fn(&'r alloc::vec::Vec<alloc::vec::Vec<u8>>, usize) -> &'r <alloc::vec::Vec<alloc::vec::Vec<u8>> as core::ops::Index<usize>>::Output {<alloc::vec::Vec<alloc::vec::Vec<u8>> as core::ops::Index<usize>>::index}
                                         // + literal: Const { ty: for<'r> fn(&'r alloc::vec::Vec<alloc::vec::Vec<u8>>, usize) -> &'r <alloc::vec::Vec<alloc::vec::Vec<u8>> as core::ops::Index<usize>>::Output {<alloc::vec::Vec<alloc::vec::Vec<u8>> as core::ops::Index<usize>>::index}, val: Scalar(<ZST>) }
                                         // ty::Const
                                         // + ty: usize
                                         // + val: Scalar(0x0000000000000000)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:226:31: 226:32
                                         // + ty: usize
                                         // + literal: Const { ty: usize, val: Scalar(0x0000000000000000) }
    }

    bb35: {
        _61 = _62;                       // bb35[0]: scope 8 at src/header/netdb/mod.rs:226:29: 226:33
        _60 = const <alloc::vec::Vec<u8> as lazy_static::__Deref>::deref(move _61) -> bb36; // bb35[1]: scope 8 at src/header/netdb/mod.rs:226:29: 226:33
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r alloc::vec::Vec<u8>) -> &'r <alloc::vec::Vec<u8> as lazy_static::__Deref>::Target {<alloc::vec::Vec<u8> as lazy_static::__Deref>::deref}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:226:29: 226:33
                                         // + ty: for<'r> fn(&'r alloc::vec::Vec<u8>) -> &'r <alloc::vec::Vec<u8> as lazy_static::__Deref>::Target {<alloc::vec::Vec<u8> as lazy_static::__Deref>::deref}
                                         // + literal: Const { ty: for<'r> fn(&'r alloc::vec::Vec<u8>) -> &'r <alloc::vec::Vec<u8> as lazy_static::__Deref>::Target {<alloc::vec::Vec<u8> as lazy_static::__Deref>::deref}, val: Scalar(<ZST>) }
    }

    bb36: {
        _59 = _60;                       // bb36[0]: scope 8 at src/header/netdb/mod.rs:226:29: 226:33
        StorageDead(_63);                // bb36[1]: scope 8 at src/header/netdb/mod.rs:226:32: 226:33
        StorageDead(_61);                // bb36[2]: scope 8 at src/header/netdb/mod.rs:226:32: 226:33
        _58 = const alloc::slice::<impl [u8]>::to_vec(move _59) -> bb37; // bb36[3]: scope 8 at src/header/netdb/mod.rs:226:29: 226:42
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r [u8]) -> alloc::vec::Vec<u8> {alloc::slice::<impl [u8]>::to_vec}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:226:34: 226:40
                                         // + ty: for<'r> fn(&'r [u8]) -> alloc::vec::Vec<u8> {alloc::slice::<impl [u8]>::to_vec}
                                         // + literal: Const { ty: for<'r> fn(&'r [u8]) -> alloc::vec::Vec<u8> {alloc::slice::<impl [u8]>::to_vec}, val: Scalar(<ZST>) }
    }

    bb37: {
        StorageDead(_59);                // bb37[0]: scope 8 at src/header/netdb/mod.rs:226:41: 226:42
        StorageDead(_62);                // bb37[1]: scope 8 at src/header/netdb/mod.rs:226:42: 226:43
        StorageDead(_60);                // bb37[2]: scope 8 at src/header/netdb/mod.rs:226:42: 226:43
        StorageLive(_64);                // bb37[3]: scope 9 at src/header/netdb/mod.rs:227:25: 227:40
        StorageLive(_65);                // bb37[4]: scope 9 at src/header/netdb/mod.rs:227:30: 227:39
        _65 = move _58;                  // bb37[5]: scope 9 at src/header/netdb/mod.rs:227:30: 227:39
        ((_64 as Some).0: alloc::vec::Vec<u8>) = move _65; // bb37[6]: scope 9 at src/header/netdb/mod.rs:227:25: 227:40
        discriminant(_64) = 1;           // bb37[7]: scope 9 at src/header/netdb/mod.rs:227:25: 227:40
        StorageDead(_65);                // bb37[8]: scope 9 at src/header/netdb/mod.rs:227:39: 227:40
        drop((header::netdb::host::HOST_NAME: core::option::Option<alloc::vec::Vec<u8>>)) -> bb50; // bb37[9]: scope 9 at src/header/netdb/mod.rs:227:13: 227:22
    }

    bb38: {
        StorageDead(_71);                // bb38[0]: scope 9 at src/header/netdb/mod.rs:229:42: 229:43
        _69 = const core::option::Option::<&mut alloc::vec::Vec<u8>>::unwrap(move _70) -> bb39; // bb38[1]: scope 9 at src/header/netdb/mod.rs:229:25: 229:52
                                         // ty::Const
                                         // + ty: fn(core::option::Option<&mut alloc::vec::Vec<u8>>) -> &mut alloc::vec::Vec<u8> {core::option::Option::<&mut alloc::vec::Vec<u8>>::unwrap}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:229:44: 229:50
                                         // + ty: fn(core::option::Option<&mut alloc::vec::Vec<u8>>) -> &mut alloc::vec::Vec<u8> {core::option::Option::<&mut alloc::vec::Vec<u8>>::unwrap}
                                         // + literal: Const { ty: fn(core::option::Option<&mut alloc::vec::Vec<u8>>) -> &mut alloc::vec::Vec<u8> {core::option::Option::<&mut alloc::vec::Vec<u8>>::unwrap}, val: Scalar(<ZST>) }
    }

    bb39: {
        _68 = _69;                       // bb39[0]: scope 9 at src/header/netdb/mod.rs:229:25: 229:52
        StorageDead(_70);                // bb39[1]: scope 9 at src/header/netdb/mod.rs:229:51: 229:52
        _67 = const alloc::vec::Vec::<u8>::as_mut_ptr(move _68) -> bb40; // bb39[2]: scope 9 at src/header/netdb/mod.rs:229:25: 229:65
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r mut alloc::vec::Vec<u8>) -> *mut u8 {alloc::vec::Vec::<u8>::as_mut_ptr}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:229:53: 229:63
                                         // + ty: for<'r> fn(&'r mut alloc::vec::Vec<u8>) -> *mut u8 {alloc::vec::Vec::<u8>::as_mut_ptr}
                                         // + literal: Const { ty: for<'r> fn(&'r mut alloc::vec::Vec<u8>) -> *mut u8 {alloc::vec::Vec::<u8>::as_mut_ptr}, val: Scalar(<ZST>) }
    }

    bb40: {
        StorageDead(_68);                // bb40[0]: scope 9 at src/header/netdb/mod.rs:229:64: 229:65
        _66 = move _67 as *mut i8 (Misc); // bb40[1]: scope 9 at src/header/netdb/mod.rs:229:25: 229:80
        StorageDead(_67);                // bb40[2]: scope 9 at src/header/netdb/mod.rs:229:79: 229:80
        StorageLive(_72);                // bb40[3]: scope 9 at src/header/netdb/mod.rs:230:28: 230:84
        StorageLive(_73);                // bb40[4]: scope 9 at src/header/netdb/mod.rs:230:28: 230:55
        StorageLive(_74);                // bb40[5]: scope 9 at src/header/netdb/mod.rs:230:28: 230:55
        StorageLive(_75);                // bb40[6]: scope 9 at src/header/netdb/mod.rs:230:28: 230:40
        _75 = &mut _41;                  // bb40[7]: scope 9 at src/header/netdb/mod.rs:230:28: 230:40
        _74 = const alloc::vec::Vec::<*mut i8>::as_mut_slice(move _75) -> bb41; // bb40[8]: scope 9 at src/header/netdb/mod.rs:230:28: 230:55
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r mut alloc::vec::Vec<*mut i8>) -> &'r mut [*mut i8] {alloc::vec::Vec::<*mut i8>::as_mut_slice}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:230:41: 230:53
                                         // + ty: for<'r> fn(&'r mut alloc::vec::Vec<*mut i8>) -> &'r mut [*mut i8] {alloc::vec::Vec::<*mut i8>::as_mut_slice}
                                         // + literal: Const { ty: for<'r> fn(&'r mut alloc::vec::Vec<*mut i8>) -> &'r mut [*mut i8] {alloc::vec::Vec::<*mut i8>::as_mut_slice}, val: Scalar(<ZST>) }
    }

    bb41: {
        _73 = _74;                       // bb41[0]: scope 9 at src/header/netdb/mod.rs:230:28: 230:55
        StorageDead(_75);                // bb41[1]: scope 9 at src/header/netdb/mod.rs:230:54: 230:55
        _72 = const core::slice::<impl [*mut i8]>::as_mut_ptr(move _73) -> bb42; // bb41[2]: scope 9 at src/header/netdb/mod.rs:230:28: 230:68
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r mut [*mut i8]) -> *mut *mut i8 {core::slice::<impl [*mut i8]>::as_mut_ptr}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:230:56: 230:66
                                         // + ty: for<'r> fn(&'r mut [*mut i8]) -> *mut *mut i8 {core::slice::<impl [*mut i8]>::as_mut_ptr}
                                         // + literal: Const { ty: for<'r> fn(&'r mut [*mut i8]) -> *mut *mut i8 {core::slice::<impl [*mut i8]>::as_mut_ptr}, val: Scalar(<ZST>) }
    }

    bb42: {
        StorageDead(_73);                // bb42[0]: scope 9 at src/header/netdb/mod.rs:230:67: 230:68
        StorageLive(_76);                // bb42[1]: scope 9 at src/header/netdb/mod.rs:231:29: 231:35
        _76 = _3;                        // bb42[2]: scope 9 at src/header/netdb/mod.rs:231:29: 231:35
        StorageLive(_77);                // bb42[3]: scope 9 at src/header/netdb/mod.rs:232:27: 232:40
        StorageLive(_78);                // bb42[4]: scope 9 at src/header/netdb/mod.rs:232:27: 232:33
        _78 = _2;                        // bb42[5]: scope 9 at src/header/netdb/mod.rs:232:27: 232:33
        _77 = move _78 as i32 (Misc);    // bb42[6]: scope 9 at src/header/netdb/mod.rs:232:27: 232:40
        StorageDead(_78);                // bb42[7]: scope 9 at src/header/netdb/mod.rs:232:39: 232:40
        StorageLive(_79);                // bb42[8]: scope 9 at src/header/netdb/mod.rs:233:30: 233:57
        StorageLive(_80);                // bb42[9]: scope 9 at src/header/netdb/mod.rs:233:30: 233:44
        StorageLive(_81);                // bb42[10]: scope 9 at src/header/netdb/mod.rs:233:30: 233:44
        _81 = &mut (header::netdb::host::HOST_ADDR_LIST: [*mut i8; 2]); // bb42[11]: scope 9 at src/header/netdb/mod.rs:233:30: 233:44
        _80 = move _81 as &mut [*mut i8] (Pointer(Unsize)); // bb42[12]: scope 9 at src/header/netdb/mod.rs:233:30: 233:44
        StorageDead(_81);                // bb42[13]: scope 9 at src/header/netdb/mod.rs:233:43: 233:44
        _79 = const core::slice::<impl [*mut i8]>::as_mut_ptr(move _80) -> bb43; // bb42[14]: scope 9 at src/header/netdb/mod.rs:233:30: 233:57
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r mut [*mut i8]) -> *mut *mut i8 {core::slice::<impl [*mut i8]>::as_mut_ptr}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:233:45: 233:55
                                         // + ty: for<'r> fn(&'r mut [*mut i8]) -> *mut *mut i8 {core::slice::<impl [*mut i8]>::as_mut_ptr}
                                         // + literal: Const { ty: for<'r> fn(&'r mut [*mut i8]) -> *mut *mut i8 {core::slice::<impl [*mut i8]>::as_mut_ptr}, val: Scalar(<ZST>) }
    }

    bb43: {
        StorageDead(_80);                // bb43[0]: scope 9 at src/header/netdb/mod.rs:233:56: 233:57
        ((header::netdb::host::HOST_ENTRY: header::netdb::hostent).0: *mut i8) = move _66; // bb43[1]: scope 9 at src/header/netdb/mod.rs:228:13: 234:14
        ((header::netdb::host::HOST_ENTRY: header::netdb::hostent).1: *mut *mut i8) = move _72; // bb43[2]: scope 9 at src/header/netdb/mod.rs:228:13: 234:14
        ((header::netdb::host::HOST_ENTRY: header::netdb::hostent).2: i32) = move _76; // bb43[3]: scope 9 at src/header/netdb/mod.rs:228:13: 234:14
        ((header::netdb::host::HOST_ENTRY: header::netdb::hostent).3: i32) = move _77; // bb43[4]: scope 9 at src/header/netdb/mod.rs:228:13: 234:14
        ((header::netdb::host::HOST_ENTRY: header::netdb::hostent).4: *mut *mut i8) = move _79; // bb43[5]: scope 9 at src/header/netdb/mod.rs:228:13: 234:14
        StorageDead(_79);                // bb43[6]: scope 9 at src/header/netdb/mod.rs:234:13: 234:14
        StorageDead(_77);                // bb43[7]: scope 9 at src/header/netdb/mod.rs:234:13: 234:14
        StorageDead(_76);                // bb43[8]: scope 9 at src/header/netdb/mod.rs:234:13: 234:14
        StorageDead(_72);                // bb43[9]: scope 9 at src/header/netdb/mod.rs:234:13: 234:14
        StorageDead(_66);                // bb43[10]: scope 9 at src/header/netdb/mod.rs:234:13: 234:14
        StorageDead(_74);                // bb43[11]: scope 9 at src/header/netdb/mod.rs:234:14: 234:15
        StorageDead(_69);                // bb43[12]: scope 9 at src/header/netdb/mod.rs:234:14: 234:15
        StorageLive(_82);                // bb43[13]: scope 9 at src/header/netdb/mod.rs:235:13: 235:28
        StorageLive(_83);                // bb43[14]: scope 9 at src/header/netdb/mod.rs:235:13: 235:28
        _83 = &mut (header::netdb::host::HOST_ENTRY: header::netdb::hostent); // bb43[15]: scope 9 at src/header/netdb/mod.rs:235:13: 235:28
        _82 = _83;                       // bb43[16]: scope 9 at src/header/netdb/mod.rs:235:13: 235:28
        _0 = move _82 as *mut header::netdb::hostent (Misc); // bb43[17]: scope 9 at src/header/netdb/mod.rs:235:13: 235:28
        StorageDead(_82);                // bb43[18]: scope 9 at src/header/netdb/mod.rs:235:27: 235:28
        StorageDead(_58);                // bb43[19]: scope 8 at src/header/netdb/mod.rs:236:9: 236:10
        StorageDead(_83);                // bb43[20]: scope 8 at src/header/netdb/mod.rs:236:9: 236:10
        drop(_50) -> bb44;               // bb43[21]: scope 7 at src/header/netdb/mod.rs:237:11: 237:12
    }

    bb44: {
        StorageDead(_50);                // bb44[0]: scope 7 at src/header/netdb/mod.rs:237:11: 237:12
        goto -> bb47;                    // bb44[1]: scope 7 at src/header/netdb/mod.rs:222:5: 241:6
    }

    bb45: {
        StorageLive(_84);                // bb45[0]: scope 7 at src/header/netdb/mod.rs:237:13: 237:14
        _84 = ((_47 as Err).0: i32);     // bb45[1]: scope 7 at src/header/netdb/mod.rs:237:13: 237:14
        StorageLive(_85);                // bb45[2]: scope 10 at src/header/netdb/mod.rs:238:31: 238:32
        _85 = _84;                       // bb45[3]: scope 10 at src/header/netdb/mod.rs:238:31: 238:32
        (platform::errno: i32) = move _85; // bb45[4]: scope 10 at src/header/netdb/mod.rs:238:13: 238:32
        StorageDead(_85);                // bb45[5]: scope 10 at src/header/netdb/mod.rs:238:31: 238:32
        _0 = const core::ptr::null_mut::<header::netdb::hostent>() -> bb46; // bb45[6]: scope 10 at src/header/netdb/mod.rs:239:13: 239:28
                                         // ty::Const
                                         // + ty: fn() -> *mut header::netdb::hostent {core::ptr::null_mut::<header::netdb::hostent>}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:239:13: 239:26
                                         // + ty: fn() -> *mut header::netdb::hostent {core::ptr::null_mut::<header::netdb::hostent>}
                                         // + literal: Const { ty: fn() -> *mut header::netdb::hostent {core::ptr::null_mut::<header::netdb::hostent>}, val: Scalar(<ZST>) }
    }

    bb46: {
        StorageDead(_84);                // bb46[0]: scope 7 at src/header/netdb/mod.rs:241:5: 241:6
        goto -> bb47;                    // bb46[1]: scope 7 at src/header/netdb/mod.rs:222:5: 241:6
    }

    bb47: {
        drop(_41) -> bb48;               // bb47[0]: scope 6 at src/header/netdb/mod.rs:242:1: 242:2
    }

    bb48: {
        StorageDead(_41);                // bb48[0]: scope 6 at src/header/netdb/mod.rs:242:1: 242:2
        StorageDead(_34);                // bb48[1]: scope 2 at src/header/netdb/mod.rs:242:1: 242:2
        StorageDead(_7);                 // bb48[2]: scope 1 at src/header/netdb/mod.rs:242:1: 242:2
        StorageDead(_4);                 // bb48[3]: scope 0 at src/header/netdb/mod.rs:242:1: 242:2
        _87 = discriminant(_47);         // bb48[4]: scope 0 at src/header/netdb/mod.rs:242:1: 242:2
        switchInt(move _87) -> [0isize: bb52, otherwise: bb54]; // bb48[5]: scope 0 at src/header/netdb/mod.rs:242:1: 242:2
    }

    bb49: {
        (header::netdb::host::HOST_ALIASES: core::option::Option<alloc::vec::Vec<alloc::vec::Vec<u8>>>) = move _45; // bb49[0]: scope 7 at src/header/netdb/mod.rs:220:5: 220:17
        StorageDead(_45);                // bb49[1]: scope 7 at src/header/netdb/mod.rs:220:38: 220:39
        StorageLive(_47);                // bb49[2]: scope 7 at src/header/netdb/mod.rs:222:11: 222:28
        StorageLive(_48);                // bb49[3]: scope 7 at src/header/netdb/mod.rs:222:23: 222:27
        _48 = _4;                        // bb49[4]: scope 7 at src/header/netdb/mod.rs:222:23: 222:27
        _86 = const true;                // bb49[5]: scope 7 at src/header/netdb/mod.rs:222:11: 222:28
                                         // ty::Const
                                         // + ty: bool
                                         // + val: Scalar(0x01)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:222:11: 222:28
                                         // + ty: bool
                                         // + literal: Const { ty: bool, val: Scalar(0x01) }
        _47 = const header::netdb::lookup::lookup_addr(move _48) -> bb29; // bb49[6]: scope 7 at src/header/netdb/mod.rs:222:11: 222:28
                                         // ty::Const
                                         // + ty: fn(header::netinet_in::in_addr) -> core::result::Result<alloc::vec::Vec<alloc::vec::Vec<u8>>, i32> {header::netdb::lookup::lookup_addr}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:222:11: 222:22
                                         // + ty: fn(header::netinet_in::in_addr) -> core::result::Result<alloc::vec::Vec<alloc::vec::Vec<u8>>, i32> {header::netdb::lookup::lookup_addr}
                                         // + literal: Const { ty: fn(header::netinet_in::in_addr) -> core::result::Result<alloc::vec::Vec<alloc::vec::Vec<u8>>, i32> {header::netdb::lookup::lookup_addr}, val: Scalar(<ZST>) }
    }

    bb50: {
        (header::netdb::host::HOST_NAME: core::option::Option<alloc::vec::Vec<u8>>) = move _64; // bb50[0]: scope 9 at src/header/netdb/mod.rs:227:13: 227:22
        StorageDead(_64);                // bb50[1]: scope 9 at src/header/netdb/mod.rs:227:39: 227:40
        StorageLive(_66);                // bb50[2]: scope 9 at src/header/netdb/mod.rs:229:25: 229:80
        StorageLive(_67);                // bb50[3]: scope 9 at src/header/netdb/mod.rs:229:25: 229:65
        StorageLive(_68);                // bb50[4]: scope 9 at src/header/netdb/mod.rs:229:25: 229:52
        StorageLive(_69);                // bb50[5]: scope 9 at src/header/netdb/mod.rs:229:25: 229:52
        StorageLive(_70);                // bb50[6]: scope 9 at src/header/netdb/mod.rs:229:25: 229:43
        StorageLive(_71);                // bb50[7]: scope 9 at src/header/netdb/mod.rs:229:25: 229:34
        _71 = &mut (header::netdb::host::HOST_NAME: core::option::Option<alloc::vec::Vec<u8>>); // bb50[8]: scope 9 at src/header/netdb/mod.rs:229:25: 229:34
        _70 = const core::option::Option::<alloc::vec::Vec<u8>>::as_mut(move _71) -> bb38; // bb50[9]: scope 9 at src/header/netdb/mod.rs:229:25: 229:43
                                         // ty::Const
                                         // + ty: for<'r> fn(&'r mut core::option::Option<alloc::vec::Vec<u8>>) -> core::option::Option<&'r mut alloc::vec::Vec<u8>> {core::option::Option::<alloc::vec::Vec<u8>>::as_mut}
                                         // + val: Scalar(<ZST>)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:229:35: 229:41
                                         // + ty: for<'r> fn(&'r mut core::option::Option<alloc::vec::Vec<u8>>) -> core::option::Option<&'r mut alloc::vec::Vec<u8>> {core::option::Option::<alloc::vec::Vec<u8>>::as_mut}
                                         // + literal: Const { ty: for<'r> fn(&'r mut core::option::Option<alloc::vec::Vec<u8>>) -> core::option::Option<&'r mut alloc::vec::Vec<u8>> {core::option::Option::<alloc::vec::Vec<u8>>::as_mut}, val: Scalar(<ZST>) }
    }

    bb51: {
        _86 = const false;               // bb51[0]: scope 0 at src/header/netdb/mod.rs:242:1: 242:2
                                         // ty::Const
                                         // + ty: bool
                                         // + val: Scalar(0x00)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:242:1: 242:2
                                         // + ty: bool
                                         // + literal: Const { ty: bool, val: Scalar(0x00) }
        StorageDead(_47);                // bb51[1]: scope 0 at src/header/netdb/mod.rs:242:1: 242:2
        goto -> bb21;                    // bb51[2]: scope 0 at src/header/netdb/mod.rs:242:2: 242:2
    }

    bb52: {
        switchInt(_86) -> [false: bb51, otherwise: bb53]; // bb52[0]: scope 0 at src/header/netdb/mod.rs:242:1: 242:2
    }

    bb53: {
        _86 = const false;               // bb53[0]: scope 0 at src/header/netdb/mod.rs:242:1: 242:2
                                         // ty::Const
                                         // + ty: bool
                                         // + val: Scalar(0x00)
                                         // mir::Constant
                                         // + span: src/header/netdb/mod.rs:242:1: 242:2
                                         // + ty: bool
                                         // + literal: Const { ty: bool, val: Scalar(0x00) }
        drop(((_47 as Ok).0: alloc::vec::Vec<alloc::vec::Vec<u8>>)) -> bb51; // bb53[1]: scope 0 at src/header/netdb/mod.rs:242:1: 242:2
    }

    bb54: {
        drop(_47) -> bb51;               // bb54[0]: scope 0 at src/header/netdb/mod.rs:242:1: 242:2
    }
}
