// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --
//
// THE CONTENTS OF THIS FILE IS GENERATED BY CODE AND
// ANY MODIFICATIONS WILL BE OVERWRITTEN
//
// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --

// %BANNER_BEGIN%
// ---------------------------------------------------------------------
// %COPYRIGHT_BEGIN%
//
// Copyright (c) 2018 Magic Leap, Inc. All Rights Reserved.
// Use of this file is governed by the Creator Agreement, located
// here: https://id.magicleap.com/creator-terms
//
// %COPYRIGHT_END%
// ---------------------------------------------------------------------
// %BANNER_END%

// %SRC_VERSION%: 1

#include <SceneDescriptor.h>

SceneDescriptor::SceneDescriptor(int index, const char * externalName, const char * id, const char * sceneGraphPath, const char * resourceModelPath, const ExternalNodeReferences& externalNodeReferences, bool initiallySpawned)
:
  index_(index),
  externalName_(externalName),
  id_(id),
  sceneGraphPath_(sceneGraphPath),
  resourceModelPath_(resourceModelPath),
  externalNodeReferences_(externalNodeReferences),
  initiallySpawned_(initiallySpawned) {
}

int SceneDescriptor::getIndex() const {
  return index_;
}

const std::string & SceneDescriptor::getExternalName() const {
	return externalName_;
}

const std::string & SceneDescriptor::getId() const {
	return id_;
}

const std::string & SceneDescriptor::getSceneGraphPath() const {
	return sceneGraphPath_;
}

const std::string & SceneDescriptor::getResourceModelPath() const {
	return resourceModelPath_;
}

const SceneDescriptor::ExternalNodeReferences & SceneDescriptor::getExternalNodeReferences() const {
	return externalNodeReferences_;
}

bool SceneDescriptor::getInitiallySpawned() const {
	return initiallySpawned_;
}

bool operator<(const SceneDescriptor& a, const SceneDescriptor& b) {
    return a.getExternalName() < b.getExternalName();
}

