// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --
//
// THE CONTENTS OF THIS FILE IS GENERATED BY CODE AND
// ANY MODIFICATIONS WILL BE OVERWRITTEN
//
// -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING -- WARNING --

// %BANNER_BEGIN%
// ---------------------------------------------------------------------
// %COPYRIGHT_BEGIN%
//
// Copyright (c) 2018 Magic Leap, Inc. All Rights Reserved.
// Use of this file is governed by the Creator Agreement, located
// here: https://id.magicleap.com/creator-terms
//
// %COPYRIGHT_END%
// ---------------------------------------------------------------------
// %BANNER_END%

// %SRC_VERSION%: 1

#pragma once

#include <string>
#include <map>

// data class 
class SceneDescriptor {
  public:

    typedef std::map<std::string /* externalNodeName */, const std::string& /* externalNodeId */> ExternalNodeReferences;

    SceneDescriptor(int index, const char* externalName, const char* id, const char* sceneGraphFilePath, const char* resourceModelFilePath, const ExternalNodeReferences& externalNodeReferences, bool initiallySpawned);
    const std::string& getExternalName() const;
    const std::string& getId() const;
    const std::string& getSceneGraphPath() const;
    const std::string& getResourceModelPath() const;
    const ExternalNodeReferences & getExternalNodeReferences() const;
    bool getInitiallySpawned() const;

  private:

    friend class PrismSceneManager;
    int getIndex() const;

  private:

    int index_;
    std::string externalName_;
    std::string id_;
    std::string sceneGraphPath_;
    std::string resourceModelPath_;
    const ExternalNodeReferences& externalNodeReferences_;
    bool initiallySpawned_;
};

bool operator<(const SceneDescriptor& a, const SceneDescriptor& b);

