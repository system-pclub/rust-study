# Remove built-in rules and variables
# n.b. no-op for make --version < 4.0
MAKEFLAGS += -r
MAKEFLAGS += -R

MAKEFILE_COMMON_PATH := $(dir $(abspath $(lastword $(MAKEFILE_LIST))))

TOOLCHAIN ?= llvm

CARGO ?= cargo

# This will hopefully move into Cargo.toml (or Cargo.toml.local) eventually.
# lld uses the page size to align program sections. It defaults to 4096 and this
# puts a gap between before the .relocate section. `zmax-page-size=512` tells
# lld the actual page size so it doesn't have to be conservative.
RUSTFLAGS_FOR_CARGO_LINKING ?= -C link-arg=-Tlayout.ld -C linker=rust-lld \
-Z linker-flavor=ld.lld -C relocation-model=dynamic-no-pic \
-C link-arg=-zmax-page-size=512

# Disallow warnings for continuous integration builds. Disallowing them here
# ensures that warnings during testing won't prevent compilation from succeeding.
ifeq ($(CI),true)
  RUSTFLAGS_FOR_CARGO_LINKING += -D warnings
endif

# http://stackoverflow.com/questions/10858261/abort-makefile-if-variable-not-set
# Check that given variables are set and all have non-empty values,
# die with an error otherwise.
#
# Params:
#   1. Variable name(s) to test.
#   2. (optional) Error message to print.
check_defined = \
    $(strip $(foreach 1,$1, \
        $(call __check_defined,$1,$(strip $(value 2)))))
__check_defined = \
    $(if $(value $1),, \
      $(error Undefined $1$(if $2, ($2))))


$(call check_defined, PLATFORM)
$(call check_defined, TARGET)

# If environment variable V is non-empty, be verbose
ifneq ($(V),)
Q=
VERBOSE = --verbose
else
Q=@
VERBOSE =
endif

export TOCK_KERNEL_VERSION := $(shell git describe --always 2> /dev/null || echo "1.3+")


# Validate that rustup is new enough
MINIMUM_RUSTUP_VERSION := 1.11.0
RUSTUP_VERSION := $(strip $(word 2, $(shell rustup --version)))
ifeq ($(shell $(MAKEFILE_COMMON_PATH)../tools/semver.sh $(RUSTUP_VERSION) \< $(MINIMUM_RUSTUP_VERSION)), true)
  $(warning Required tool `rustup` is out-of-date.)
  $(warning Running `rustup update` in 3 seconds (ctrl-c to cancel))
  $(shell sleep 3s)
  DUMMY := $(shell rustup update)
endif

LLVM_TOOLS_INSTALLED := $(shell rustup component list | grep 'llvm-tools-preview.*(installed)' -q; echo $$?)
ifeq ($(LLVM_TOOLS_INSTALLED),1)
  $(shell rustup component add llvm-tools-preview)
endif
ifneq ($(shell rustup component list | grep rust-src),rust-src (installed))
  $(shell rustup component add rust-src)
endif
ifneq ($(shell rustup target list | grep "$(TARGET) (installed)"),$(TARGET) (installed))
  $(shell rustup target add $(TARGET))
endif

ifeq ($(TOOLCHAIN),llvm)
  # If the user is using the standard toolchain we need to get the full path.
  # rustup should take care of this for us by putting in a proxy in .cargo/bin,
  # but until that is setup we workaround it.
  TOOLCHAIN = "$(shell dirname $(shell find `rustc --print sysroot` -name llvm-size))/llvm"
endif

SIZE      ?= $(TOOLCHAIN)-size
OBJCOPY   ?= $(TOOLCHAIN)-objcopy
OBJDUMP   ?= $(TOOLCHAIN)-objdump
OBJDUMP_FLAGS += --disassemble-all --source --arch-name=thumb --section-headers

# Dump configuration for verbose builds
ifneq ($(V),)
  $(info )
  $(info **************************************************)
  $(info TOCK KERNEL BUILD SYSTEM -- VERBOSE BUILD)
  $(info **************************************************)
  $(info Config:)
  $(info MAKEFLAGS=$(MAKEFLAGS))
  $(info OBJCOPY=$(OBJCOPY))
  $(info PLATFORM=$(PLATFORM))
  $(info TARGET=$(TARGET))
  $(info TOCK_KERNEL_VERSION=$(TOCK_KERNEL_VERSION))
  $(info TOOLCHAIN=$(TOOLCHAIN))
  $(info )
  $(info $(OBJCOPY) --version = $(shell $(OBJCOPY) --version))
  $(info rustc --version = $(shell rustc --version))
  $(info **************************************************)
  $(info )
endif

.PRECIOUS: %.elf
# Support rules

# User-facing targets
.PHONY: all
all: release

# `make check` runs the Rust compiler but does not actually output the final
# binary. This makes checking for Rust errors much faster.
.PHONY: check
check:
	$(Q)RUSTFLAGS="$(RUSTFLAGS_FOR_CARGO_LINKING)" $(CARGO) check --target=$(TARGET) $(VERBOSE) --release

.PHONY: clean
clean::
	$(Q)$(CARGO) clean $(VERBOSE)

.PHONY: release
release: target/$(TARGET)/release/$(PLATFORM).bin

.PHONY: debug
debug: target/$(TARGET)/debug/$(PLATFORM).bin

.PHONY: debug-lst
debug-lst: target/$(TARGET)/debug/$(PLATFORM).lst

.PHONY: doc
doc: | target
	$(Q)RUSTDOCFLAGS=--document-private-items $(CARGO) doc $(VERBOSE) --release --target=$(TARGET)

.PHONY: lst
lst: target/$(TARGET)/release/$(PLATFORM).lst

.PHONY: release
release: target/$(TARGET)/release/$(PLATFORM).bin


# Support rules

target:
	@mkdir -p target

# Cargo outputs an elf file (just without a file extension)
%.elf: %
	$(Q)cp $< $@

%.bin: %.elf
	$(Q)$(OBJCOPY) --output-target=binary $^ $@

%.lst: %.elf
	$(Q)$(OBJDUMP) $(OBJDUMP_FLAGS) $< > $@


# Cargo-drivers
# We want to always invoke cargo (yay nested build systems), so these need to
# be phony, which means they can't be pattern rules.

.PHONY: target/$(TARGET)/release/$(PLATFORM)
target/$(TARGET)/release/$(PLATFORM):
	$(Q)RUSTFLAGS="$(RUSTFLAGS_FOR_CARGO_LINKING)" $(CARGO) build --target=$(TARGET) $(VERBOSE) --release
	$(Q)$(SIZE) $@

.PHONY: target/$(TARGET)/debug/$(PLATFORM)
target/$(TARGET)/debug/$(PLATFORM):
	$(Q)RUSTFLAGS="$(RUSTFLAGS_FOR_CARGO_LINKING)" $(CARGO) build $(VERBOSE) --target=$(TARGET)
	$(Q)$(SIZE) $@
