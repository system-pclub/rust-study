note: No external requirements
  --> $DIR/escape-argument.rs:26:38
   |
LL |         let mut closure = expect_sig(|p, y| *p = y);
   |                                      ^^^^^^^^^^^^^
   |
   = note: defining type: DefId(0:4 ~ escape_argument[317d]::test[0]::{{closure}}[0]) with closure substs [
               i16,
               for<'r, 's> extern "rust-call" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) mut &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) i32, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) i32)),
           ]

note: No external requirements
  --> $DIR/escape-argument.rs:20:1
   |
LL | / fn test() {
LL | |     let x = 44;
LL | |     let mut p = &x;
LL | |
...  |
LL | |     deref(p);
LL | | }
   | |_^
   |
   = note: defining type: DefId(0:3 ~ escape_argument[317d]::test[0]) with substs []

error[E0597]: `y` does not live long enough
  --> $DIR/escape-argument.rs:27:25
   |
LL |         closure(&mut p, &y);
   |                         ^^ borrowed value does not live long enough
LL |
LL |     }
   |     - `y` dropped here while still borrowed
LL | 
LL |     deref(p);
   |           - borrow later used here

error: aborting due to previous error

For more information about this error, try `rustc --explain E0597`.
