error[E0381]: assign to part of possibly-uninitialized variable: `s`
  --> $DIR/issue-21232-partial-init-and-use.rs:97:5
   |
LL |     s.x = 10; s.y = Box::new(20);
   |     ^^^^^^^^ use of possibly-uninitialized `s`

error[E0381]: assign to part of possibly-uninitialized variable: `t`
  --> $DIR/issue-21232-partial-init-and-use.rs:104:5
   |
LL |     t.0 = 10; t.1 = Box::new(20);
   |     ^^^^^^^^ use of possibly-uninitialized `t`

error[E0382]: assign to part of moved value: `s`
  --> $DIR/issue-21232-partial-init-and-use.rs:111:5
   |
LL |     let mut s: S<B> = S::new(); drop(s);
   |         -----                        - value moved here
   |         |
   |         move occurs because `s` has type `S<std::boxed::Box<u32>>`, which does not implement the `Copy` trait
LL |     s.x = 10; s.y = Box::new(20);
   |     ^^^^^^^^ value partially assigned here after move

error[E0382]: assign to part of moved value: `t`
  --> $DIR/issue-21232-partial-init-and-use.rs:118:5
   |
LL |     let mut t: T = (0, Box::new(0)); drop(t);
   |         -----                             - value moved here
   |         |
   |         move occurs because `t` has type `(u32, std::boxed::Box<u32>)`, which does not implement the `Copy` trait
LL |     t.0 = 10; t.1 = Box::new(20);
   |     ^^^^^^^^ value partially assigned here after move

error[E0381]: assign to part of possibly-uninitialized variable: `s`
  --> $DIR/issue-21232-partial-init-and-use.rs:125:5
   |
LL |     s.x = 10;
   |     ^^^^^^^^ use of possibly-uninitialized `s`

error[E0381]: assign to part of possibly-uninitialized variable: `t`
  --> $DIR/issue-21232-partial-init-and-use.rs:132:5
   |
LL |     t.0 = 10;
   |     ^^^^^^^^ use of possibly-uninitialized `t`

error[E0382]: assign to part of moved value: `s`
  --> $DIR/issue-21232-partial-init-and-use.rs:139:5
   |
LL |     let mut s: S<B> = S::new(); drop(s);
   |         -----                        - value moved here
   |         |
   |         move occurs because `s` has type `S<std::boxed::Box<u32>>`, which does not implement the `Copy` trait
LL |     s.x = 10;
   |     ^^^^^^^^ value partially assigned here after move

error[E0382]: assign to part of moved value: `t`
  --> $DIR/issue-21232-partial-init-and-use.rs:146:5
   |
LL |     let mut t: T = (0, Box::new(0)); drop(t);
   |         -----                             - value moved here
   |         |
   |         move occurs because `t` has type `(u32, std::boxed::Box<u32>)`, which does not implement the `Copy` trait
LL |     t.0 = 10;
   |     ^^^^^^^^ value partially assigned here after move

error[E0381]: assign to part of possibly-uninitialized variable: `s`
  --> $DIR/issue-21232-partial-init-and-use.rs:153:5
   |
LL |     s.x = 10;
   |     ^^^^^^^^ use of possibly-uninitialized `s`

error[E0381]: assign to part of possibly-uninitialized variable: `t`
  --> $DIR/issue-21232-partial-init-and-use.rs:160:5
   |
LL |     t.0 = 10;
   |     ^^^^^^^^ use of possibly-uninitialized `t`

error[E0381]: assign to part of possibly-uninitialized variable: `q`
  --> $DIR/issue-21232-partial-init-and-use.rs:176:5
   |
LL |     q.r.f.x = 10; q.r.f.y = Box::new(20);
   |     ^^^^^^^^^^^^ use of possibly-uninitialized `q.r.f`

error[E0381]: assign to part of possibly-uninitialized variable: `q`
  --> $DIR/issue-21232-partial-init-and-use.rs:183:5
   |
LL |     q.r.f.0 = 10; q.r.f.1 = Box::new(20);
   |     ^^^^^^^^^^^^ use of possibly-uninitialized `q.r.f`

error[E0382]: assign to part of moved value: `q.r`
  --> $DIR/issue-21232-partial-init-and-use.rs:190:5
   |
LL |     let mut q: Q<S<B>> = Q::new(S::new()); drop(q.r);
   |                                                 --- value moved here
LL |     q.r.f.x = 10; q.r.f.y = Box::new(20);
   |     ^^^^^^^^^^^^ value partially assigned here after move
   |
   = note: move occurs because `q.r` has type `R<S<std::boxed::Box<u32>>>`, which does not implement the `Copy` trait

error[E0382]: assign to part of moved value: `q.r`
  --> $DIR/issue-21232-partial-init-and-use.rs:197:5
   |
LL |     let mut q: Q<T> = Q::new((0, Box::new(0))); drop(q.r);
   |                                                      --- value moved here
LL |     q.r.f.0 = 10; q.r.f.1 = Box::new(20);
   |     ^^^^^^^^^^^^ value partially assigned here after move
   |
   = note: move occurs because `q.r` has type `R<(u32, std::boxed::Box<u32>)>`, which does not implement the `Copy` trait

error[E0381]: assign to part of possibly-uninitialized variable: `q`
  --> $DIR/issue-21232-partial-init-and-use.rs:204:5
   |
LL |     q.r.f.x = 10;
   |     ^^^^^^^^^^^^ use of possibly-uninitialized `q.r.f`

error[E0381]: assign to part of possibly-uninitialized variable: `q`
  --> $DIR/issue-21232-partial-init-and-use.rs:211:5
   |
LL |     q.r.f.0 = 10;
   |     ^^^^^^^^^^^^ use of possibly-uninitialized `q.r.f`

error[E0382]: assign to part of moved value: `q.r`
  --> $DIR/issue-21232-partial-init-and-use.rs:218:5
   |
LL |     let mut q: Q<S<B>> = Q::new(S::new()); drop(q.r);
   |                                                 --- value moved here
LL |     q.r.f.x = 10;
   |     ^^^^^^^^^^^^ value partially assigned here after move
   |
   = note: move occurs because `q.r` has type `R<S<std::boxed::Box<u32>>>`, which does not implement the `Copy` trait

error[E0382]: assign to part of moved value: `q.r`
  --> $DIR/issue-21232-partial-init-and-use.rs:225:5
   |
LL |     let mut q: Q<T> = Q::new((0, Box::new(0))); drop(q.r);
   |                                                      --- value moved here
LL |     q.r.f.0 = 10;
   |     ^^^^^^^^^^^^ value partially assigned here after move
   |
   = note: move occurs because `q.r` has type `R<(u32, std::boxed::Box<u32>)>`, which does not implement the `Copy` trait

error[E0381]: assign to part of possibly-uninitialized variable: `q`
  --> $DIR/issue-21232-partial-init-and-use.rs:232:5
   |
LL |     q.r.f.x = 10;
   |     ^^^^^^^^^^^^ use of possibly-uninitialized `q.r.f`

error[E0381]: assign to part of possibly-uninitialized variable: `q`
  --> $DIR/issue-21232-partial-init-and-use.rs:239:5
   |
LL |     q.r.f.0 = 10;
   |     ^^^^^^^^^^^^ use of possibly-uninitialized `q.r.f`

error[E0382]: assign to part of moved value: `c`
  --> $DIR/issue-21232-partial-init-and-use.rs:257:13
   |
LL |     let mut c = (1, "".to_owned());
   |         ----- move occurs because `c` has type `(i32, std::string::String)`, which does not implement the `Copy` trait
LL |     match c {
LL |         c2 => {
   |         -- value moved here
LL |             c.0 = 2;
   |             ^^^^^^^ value partially assigned here after move

error[E0382]: assign to part of moved value: `c`
  --> $DIR/issue-21232-partial-init-and-use.rs:267:13
   |
LL |     let mut c = (1, (1, "".to_owned()));
   |         ----- move occurs because `c` has type `(i32, (i32, std::string::String))`, which does not implement the `Copy` trait
LL |     match c {
LL |         c2 => {
   |         -- value moved here
LL |             (c.1).0 = 2;
   |             ^^^^^^^^^^^ value partially assigned here after move

error[E0382]: assign to part of moved value: `c.1`
  --> $DIR/issue-21232-partial-init-and-use.rs:275:13
   |
LL |         c2 => {
   |         -- value moved here
LL |             ((c.1).1).0 = 3;
   |             ^^^^^^^^^^^^^^^ value partially assigned here after move
   |
   = note: move occurs because `c.1` has type `(i32, (i32, std::string::String))`, which does not implement the `Copy` trait

error: aborting due to 23 previous errors

Some errors have detailed explanations: E0381, E0382.
For more information about an error, try `rustc --explain E0381`.
