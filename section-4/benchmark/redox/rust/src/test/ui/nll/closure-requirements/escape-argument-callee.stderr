note: No external requirements
  --> $DIR/escape-argument-callee.rs:26:38
   |
LL |         let mut closure = expect_sig(|p, y| *p = y);
   |                                      ^^^^^^^^^^^^^
   |
   = note: defining type: DefId(0:4 ~ escape_argument_callee[317d]::test[0]::{{closure}}[0]) with closure substs [
               i16,
               for<'r, 's, 't0> extern "rust-call" fn((&ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 'r)) mut &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 's)) i32, &ReLateBound(DebruijnIndex(0), BrNamed(crate0:DefIndex(0), 't0)) i32)),
           ]

error: lifetime may not live long enough
  --> $DIR/escape-argument-callee.rs:26:45
   |
LL |         let mut closure = expect_sig(|p, y| *p = y);
   |                                       -  -  ^^^^^^ assignment requires that `'1` must outlive `'2`
   |                                       |  |
   |                                       |  has type `&'1 i32`
   |                                       has type `&'_#2r mut &'2 i32`

note: No external requirements
  --> $DIR/escape-argument-callee.rs:20:1
   |
LL | / fn test() {
LL | |     let x = 44;
LL | |     let mut p = &x;
LL | |
...  |
LL | |     deref(p);
LL | | }
   | |_^
   |
   = note: defining type: DefId(0:3 ~ escape_argument_callee[317d]::test[0]) with substs []

error: aborting due to previous error

