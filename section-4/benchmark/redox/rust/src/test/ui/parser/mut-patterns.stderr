error: `mut` must be followed by a named binding
  --> $DIR/mut-patterns.rs:9:9
   |
LL |     let mut _ = 0;
   |         ^^^^^ help: remove the `mut` prefix: `_`
   |
   = note: `mut` may be followed by `variable` and `variable @ pattern`

error: `mut` must be followed by a named binding
  --> $DIR/mut-patterns.rs:10:9
   |
LL |     let mut (_, _) = (0, 0);
   |         ^^^^^^^^^^ help: remove the `mut` prefix: `(_, _)`
   |
   = note: `mut` may be followed by `variable` and `variable @ pattern`

error: `mut` on a binding may not be repeated
  --> $DIR/mut-patterns.rs:12:13
   |
LL |     let mut mut x = 0;
   |             ^^^ help: remove the additional `mut`s

error: `mut` must be attached to each individual binding
  --> $DIR/mut-patterns.rs:17:9
   |
LL |     let mut Foo { x: x } = Foo { x: 3 };
   |         ^^^^^^^^^^^^^^^^ help: add `mut` to each binding: `Foo { x: mut x }`
   |
   = note: `mut` may be followed by `variable` and `variable @ pattern`

error: `mut` must be attached to each individual binding
  --> $DIR/mut-patterns.rs:21:9
   |
LL |     let mut Foo { x } = Foo { x: 3 };
   |         ^^^^^^^^^^^^^ help: add `mut` to each binding: `Foo { mut x }`
   |
   = note: `mut` may be followed by `variable` and `variable @ pattern`

error: `mut` on a binding may not be repeated
  --> $DIR/mut-patterns.rs:26:13
   |
LL |     let mut mut yield(become, await) = r#yield(0, 0);
   |             ^^^ help: remove the additional `mut`s

error: expected identifier, found reserved keyword `yield`
  --> $DIR/mut-patterns.rs:26:17
   |
LL |     let mut mut yield(become, await) = r#yield(0, 0);
   |                 ^^^^^ expected identifier, found reserved keyword
   |
help: you can escape reserved keywords to use them as identifiers
   |
LL |     let mut mut r#yield(become, await) = r#yield(0, 0);
   |                 ^^^^^^^

error: expected identifier, found reserved keyword `become`
  --> $DIR/mut-patterns.rs:26:23
   |
LL |     let mut mut yield(become, await) = r#yield(0, 0);
   |                       ^^^^^^ expected identifier, found reserved keyword
   |
help: you can escape reserved keywords to use them as identifiers
   |
LL |     let mut mut yield(r#become, await) = r#yield(0, 0);
   |                       ^^^^^^^^

error: expected identifier, found keyword `await`
  --> $DIR/mut-patterns.rs:26:31
   |
LL |     let mut mut yield(become, await) = r#yield(0, 0);
   |                               ^^^^^ expected identifier, found keyword
   |
help: you can escape reserved keywords to use them as identifiers
   |
LL |     let mut mut yield(become, r#await) = r#yield(0, 0);
   |                               ^^^^^^^

error: `mut` must be attached to each individual binding
  --> $DIR/mut-patterns.rs:26:9
   |
LL |     let mut mut yield(become, await) = r#yield(0, 0);
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add `mut` to each binding: `r#yield(mut r#become, mut r#await)`
   |
   = note: `mut` may be followed by `variable` and `variable @ pattern`

error: `mut` must be attached to each individual binding
  --> $DIR/mut-patterns.rs:35:9
   |
LL |     let mut W(mut a, W(b, W(ref c, W(d, B { box f }))))
   |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ help: add `mut` to each binding: `W(mut a, W(mut b, W(ref c, W(mut d, B { box mut f }))))`
   |
   = note: `mut` may be followed by `variable` and `variable @ pattern`

error: expected identifier, found `x`
  --> $DIR/mut-patterns.rs:42:21
   |
LL |             let mut $p = 0;
   |                     ^^ expected identifier
...
LL |     foo!(x);
   |     -------- in this macro invocation

error: aborting due to 12 previous errors

