diff -ru source/src/xz/file_io.c source-new/src/xz/file_io.c
--- source/src/xz/file_io.c	2016-12-30 03:13:57.000000000 -0800
+++ source-new/src/xz/file_io.c	2017-08-08 12:34:08.453700076 -0700
@@ -17,7 +17,7 @@
 #ifdef TUKLIB_DOSLIKE
 #	include <io.h>
 #else
-#	include <poll.h>
+//#	include <poll.h>
 static bool warn_fchown;
 #endif
 
@@ -222,7 +222,7 @@
 #endif // ENABLE_SANDBOX
 
 
-#ifndef TUKLIB_DOSLIKE
+#if 0
 /// \brief      Waits for input or output to become available or for a signal
 ///
 /// This uses the self-pipe trick to avoid a race condition that can occur
@@ -704,6 +704,7 @@
 	// If it is something else than a regular file, wait until
 	// there is input available. This way reading from FIFOs
 	// will work when open() is used with O_NONBLOCK.
+#if 0
 	if (!S_ISREG(pair->src_st.st_mode)) {
 		signals_unblock();
 		const io_wait_ret ret = io_wait(pair, -1, true);
@@ -713,6 +714,7 @@
 			goto error;
 	}
 #endif
+#endif
 
 #ifdef HAVE_POSIX_FADVISE
 	// It will fail with some special files like FIFOs but that is fine.
@@ -1127,7 +1129,7 @@
 				continue;
 			}
 
-#ifndef TUKLIB_DOSLIKE
+#if 0
 			if (IS_EAGAIN_OR_EWOULDBLOCK(errno)) {
 				const io_wait_ret ret = io_wait(pair,
 						mytime_get_flush_timeout(),
@@ -1215,7 +1217,7 @@
 				continue;
 			}
 
-#ifndef TUKLIB_DOSLIKE
+#if 0
 			if (IS_EAGAIN_OR_EWOULDBLOCK(errno)) {
 				if (io_wait(pair, -1, false) == IO_WAIT_MORE)
 					continue;
